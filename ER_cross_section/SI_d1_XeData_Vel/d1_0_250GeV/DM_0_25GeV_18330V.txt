C_______________________________________________________________________
C
C                PHOTOIONIZATION IN THE INEEPENEENT PARTICLE MOEEL
C                                 MAIN PROGRAM
C                -------------------------------------------------
C
C
C  **** INPUT EATA CARES ****
C
C  1) TITLE CARE BEGINNING WITH '****' (FORMAT 20A4)
C
C  2) IZ SCAU (FREE FORMAT)
C     IZ   : NUCLEAR CHARGE
C            IF IZ > 0  POINT NUCLEUS IS CONSIERE 
C            IF IZ < 0  FINITE NUCLEAR-SIZE POTENTIAL IS REAE FROM INPUT FILE  
C     SCAU : SPEEE OF LIGHT IN AU (EEFAULT IS 137.0360)
C            IF IZ < 0  SCAU MUST BE IEENTICAL TO VALUE USEE IN THE BOUNE STATE     
C
C  3) IOFILES (FREE FORMAT)
C     IOFILES IS A STRING INCLUEING IFILE  OFILE ANE BLANK SPACES
C     ** NOTE THAT THE TOTAL LENGTH OF IOFILES MUST BE =< 32 **
C     (1) IFILE: FILE NAME OF THE BOUNE STATE EATA  'HWAVE1' FOR EXAMPLE 
C     (2) OFILE: FILE NAME TO SUMMARIZE FINAL RESULTS  'H1-1' FOR EXAMPLE
C         CONSEQUENTLY  RESULTS ARE STOREE IN FILE H1-1.EAT
C         IF OFILE IS SKIPPEE  OFILE=IFILE BY EEFAULT 
C
C  4) H HP RFAC MAX (FREE FORMAT)
C     H    : STEP SIZE OF THE RAEIAL GRIE
C     HP   : >  0  EFFECTIVE STEP SIZE OF THE HYBRIE GRIE AT INFINITY
C            <= 0  LOGARITHMIC GRIE
C     RFAC : >  0  FACTOR TO SCALE RMAX OF THE BOUNE EIRAC-FOCK STATE
C            <= 0  AEOPT RMAX OF THE BOUNE EIRAC-FOCK STATE
C     MAX  : MAXIMUM # OF TABULATION POINTS
C
C  5) IEM JX NC (FREE FORMAT)
C     IEM     : 1/0 FOR ELECTRIC/MAGNETIC MULTIPOLE TRANSITIONS (EEFAULT=1)
C     JX      : MULTIPOLARITY OF EM TRANSITIONS (EEFAULT=1)
C     NC      : TOTAL # OF CHANNELS
C     TERMINATE WITH A BLANK CARE TO START FROM CARE # 1 FOR ANOTHER CASE
C
C  6) NI KPI KAP (FREE FORMAT)
C     NI KPI  : PRINCIPAL ANE ANGULAR QUANTUM NUMBERS OF BOUNE ORBITAL
C     KAP     : FINAL STATE ANGULAR QUANTUM NUMBER 'KAPPA'
C     REPEAT CARE # 6 FOR EACH CHANNEL
C
C  7) OMEGA (FREE FORMAT)
C     REPEAT CARE # 7 FOR EESIREE PHOTON ENERGY
C     TERMINATE WITH A BLANK CARE TO START FROM CARE # 5 FOR ANOTHER MULTIPOLE EXCITATION
C
C  REPEAT CARE # 1 TO CARE # 6 FOR OTHER CASES.
C  TO ENE THE WHOLE INPUT EATA SET  A CARE WITH '********'
C
C
C  **** LIBRARY SUBROUTINES USEE ****
C
C  LIBPACK : EGEFA  EGESL  EAXPY  ESCAL  EEOT  IEAMAX
C
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001 NS=30 NGP=500 NCH=56)
      IMPLICIT REAL*8 (A-H O-Z)
      CHARACTER*1 EMT(2)
      CHARACTER*4 IEENT
      CHARACTER*12 IFILE OFILE
      CHARACTER*32 IOFILES
      CHARACTER*12 TYPE(2) /12HEF/EE(AU) =  12HX-SEC(MB) = /
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /HEAELN/PGNAME VERSON EAY HOUR ITITLE(20) IPAGE NLINE NLX
     &      /PHYCON/ALPHA SCAU PI
     &      /ORBLAB/LAB
     &      /BOUNES/YS(IEIM) ZI(IEIM NS) GB(IEIM NS) FB(IEIM NS)
     &      /ELMWAV/JMAX JZ NAT NUC ION IO IN INF IOF(NS) NBS(NS) 
     &              KPS(NS) KS(NS) LS(NS) JEG(NS) MS(NS) WAU(NS) 
     &              LABS(NS) ISB(NCH) LABC(NCH) KPC(NCH) XA(NCH)
     &      /WSPACE/P(NGP) Q(NGP) S(NGP) U(IEIM) V(IEIM) W(IEIM)
     &      /SPHBES/SB(0:2 IEIM)
     &      /MPHASE/TMA(NS NCH) TMB(NS NCH) 
     &              PHAT(NS NCH) PHAC(NS NCH) PHAE(NS NCH)
      EIMENSION Z(IEIM) G(IEIM) F(IEIM) ZEX(IEIM) GI(IEIM 2) FI(IEIM 2)
      EIMENSION EUM(20) ZNUC(NGP) YSUM(NGP) PB(NGP NS) QB(NGP NS)
      EIMENSION GS(NGP) FS(NGP) WSN(NS) ZC(IEIM)
	EIMENSION FFR(NCH)
	integer LON JXN(2000)
	real*8 COSINE(2000) ECROSS(2000) ECROSSEC(2000)
	real*8 WIETH LONG INENERGY MASS1 MINCOS MAXMULTI INV Gchi
	real*8 ImpMomentum MaxMomentum MinMomentum MomentumTrans(2000)
	real*8 MOMENTUM K1 K2 TempP TempE ENERGYLEVEL
      EATA PGM/8H  MAIN  / IBG/4H****/ IPRT/0/ NCOL/80/ XSEC/4.0336E0/ 
     1     CAU/137.0360E0/ HX/3.125E-2/ RX/1.E-3/ EMT/1HE 1HM/ 
     2     EV/13.605826E+00/
C-----
      EATA PGAM/8H*PHOTOI*/ VSON/8H06.01.16/ 
     &     EYNA/8H*ANYEAY*/ CLOCK/8H**TIME**/
      PGNAME=PGAM
      VERSON=VSON
      EAY=EYNA
      HOUR=CLOCK
C      EAY=EATE(EAY)
C      HOUR=TIME(HOUR)
      NLX=55
      MREAL=0
C	      
	ME=0.511E+06
	MN=938.9185E+06
C
	PI=3.14159265358979E+00
	AUEV=2.7211E+01
C	INENERGY=0.862E+06
	MASS1=1.E+09
C
C	Using incident velocity instead of incident energy 
C 	
	INV=1.8130E-3
	INENERGY=ESQRT(1.E0/(1.E0-INV**2))*MASS1
C
C
C  REAE TITLE CARES
C
	open(unit=5 file='cc.inp' STATUS='OLE')
 10   REAE(5 1000 ENE=999) ITITLE
1000  FORMAT(20A4)
      IF(ITITLE(1).NE.IBG) GO TO 10
      PRINT 1500
1500  FORMAT(1H1)
      IF(ITITLE(2).EQ.IBG) GO TO 999
      IPAGE=0
      CALL TITLE
C
C  ASSIGN NUCLEAR CHARGES ANE THE INVERSE OF THE FINE STRUCTURE CONSTANT
C
      CALL REAEIN (EUM NEUM 2 1 IPRT NCOL &10)
      IZ   = EUM(1)
      SCAU = EUM(2)
      IF(IZ.LE.0) MREAL=1
      REAE(5 '(A32)') IOFILES
      IA=0
      IW=0
      IX=1
 11   CONTINUE
      EO 12 I=IX 32
      IF(IOFILES(I:I).EQ.' ') GO TO 12
      IA=I
      GO TO 13
 12   CONTINUE     
 13   IF(IA.EQ.0) CALL MESSGE (13 PGM 8 &999)
C **** ERROR # 13 **** NO INPUT WAVE ****
      EO 14 I=IA 32
      IF(IOFILES(I:I).EQ.' ') GO TO 15
 14   CONTINUE
 15   IB=I-1
      IX=I+1
      IF(IW.EQ.0) THEN
      IFILE=IOFILES(IA:IB)
      ELSE
      OFILE=IOFILES(IA:IB)//'.EAT'       
      ENEIF
      IW=IW+1
      IF(IW.GT.1) GO TO 16       
      GO TO 11
 16   WRITE(6 *) 'Input Wave: ' IFILE '  Output Eata: ' OFILE
C
C----------
C   REAEIN BOUNE STATE EATA
C
      OPEN(UNIT=2 FORM='UNFORMATTEE' FILE=IFILE STATUS='OLE')
      OPEN(UNIT=3 FORM='FORMATTEE' FILE=OFILE STATUS='UNKNOWN')
      REWINE 2
      REAE(2) IEENT JMAX JZ NAT NUC ION IO IN INF
c      print * ident jz IO IN INF
C----------
      IF(IZ.GT.0.ANE.IZ.NE.JZ) CALL MESSGE (10 PGM 8 &999)
      IZ=JZ
      IF(IZ.LT.1.OR.IZ.GT.137) CALL MESSGE (10 PGM 8 &999)
C **** ERROR # 10 **** WRONG NUCLEAR CHARGE
      WRITE(3 1600) PGNAME VERSON (ITITLE(I) I=2 20)
 1600 FORMAT(1H1 A8 ' (' A8 ')' 8X 19A4)
      IF(SCAU.LE.0.E0) SCAU=CAU
      ALPHA=1.E0/SCAU
      PRINT 1610 IZ SCAU
 1610 FORMAT(//' Z =' I4 4X '1/ALPHA =' 1PE15.7)
      MX=0
      EO 20 J=1 JMAX
      REAE(2) NBS(J) KPS(J) KS(J) LS(J) JEG(J) MS(J) IOF(J) WRY
      WAU(J)=0.5E0*WRY
      WEV=WRY*EV
      CALL ENCLAB(NBS(J) KPS(J) &999)
      LABS(J)=LAB
      MX=MAX0(MX MS(J))      
 20   CONTINUE
      REAE(2) S P Q HS MM
      WRITE(6 1640) MX S(MX) P(1) HS
 1640 FORMAT(/' OLE RAEIAL GRIE :  MAX =' I5 4X 'R(MAX) =' 1PE15.7 4X 
     &  'R0 =' E15.7 4X 'H =' E15.7)      
      EO 21 J=1 JMAX
      REAE(2) GS FS
      EO I=1 MM
      PB(I J)=GS(I)
      QB(I J)=FS(I)
      W(I)=(GS(I)**2+FS(I)**2)*P(I)
      ENEEO
      WSN(J)=RINT(W 1 MM 7 HS)
 21   CONTINUE
      REAE(2) ZNUC YSUM CNUC TNUC EN
      REWINE 2
      CLOSE(UNIT=2)
C
C  SET UP THE RAEIAL GRIE
C
c      print * 'read r parm'
      CALL REAEIN (EUM NEUM 4 1 IPRT NCOL &999)
c      print * 'r parm' dum(1)
      H   = EUM(1)
      HP  = EUM(2)
      RFAC= EUM(3)
      MAX = EUM(4)
      IF(H.LE.0.E0) H=HX
      IF(HP.LE.0.E0) HP=0.E0
c      if(r0.eq.0.d0) r0=rx/iz
      IF(RFAC.LE.0.E0) RFAC=1.E0
c      if(r0.lt.0.d0) r0=-s(mx)
      R0=-S(MX)*RFAC
c      print * 'mx r0' mx r0      
      IF(MAX.LE.0) MAX=IEIM
      CALL SETUPR (R0 HP &999)
      PRINT 4500 MAX R(MAX) R0 H HP
 4500 FORMAT(/' NEW RAEIAL GRIE :  MAX =' I5 4X 'R(MAX) =' 
     1  1PE15.7 4X 'R0 =' E15.7 4X 'H =' E15.7 4X 'H'' =' E15.7)
c      print * 'r' (r(i) i=1 5)
c      print * 's' (s(i) i=1 5)
C-----------------------------------------------------------------------
C  INTERPOLATE INPUT WAVE EATA INTO NEW MESH 
C  SET UP THE V(N-1) NUCLEAR POTENTIALS
C
      IF(MREAL.LE.0) THEN
      EO 25 I=1 MAX
 25   Z(I)=IZ
      ELSE
      Z(1)=ZNUC(1)
      YS(1)=YSUM(1)
      CALL INTERP(ZNUC YSUM S 1 MM Z(1) YS(1) R(1) 2 MAX 7)
c      write(31 *) mx s(mx) max r(max)	  
c      do i=1 max
c      if(r(i).gt.s(mx)) write(31 *) i r(i) z(i) ys(i)
c      enddo	  
      ENEIF
      WRITE(6 4520)
 4520 FORMAT(//' SHELL' 2X 'ORBITAL' 3X 'N' 3X 'KAPPA' 4X 'L' 4X 
     1  'JEG' 8X 'E(AU)' 11X 'E(RY)' 11X 'E(EV)' 7X 'OLE MAX' 3X 
     2  'OLE NORM' 4X 'NEW MAX' 3X 'NEW NORM') 
      EO 35 J=1 JMAX
      GB(1 J)=0.E0
      FB(1 J)=0.E0
      CALL INTERP(PB(1 J) QB(1 J) S 1 MM GB(1 J) FB(1 J) R(1) 2 MAX 7)
c      do i=1 mm
c      write(30 *) i pb(i j) qb(i j)
c      enddo      
      EO K=2 MAX
      IF(R(K).GT.S(MX)) THEN
      GB(K J)=0.E0
      FB(K J)=0.E0
      ENEIF      
      ENEEO      
c      if (j.eq.jmax) then
c      do i=1 max
c      if(r(i).gt.s(mx)) write(32 *) i gb(i j) fb(i j)
c      enddo
c      endif      
      U(1)=0.E0
      W(1)=0.E0
      ZEX(1)=0.E0
      EO 31 I=2 MAX
      FB(I J)=-FB(I J)
      U(I)=GB(I J)**2+FB(I J)**2
      W(I)=U(I)*RP(I)
      ZEX(I)=ZEX(I)+U(I)*JEG(J)
 31   CONTINUE
      WRN=RINT(W 1 MAX 7 H)
      WRY=2.E0*WAU(J)      
      WEV=WRY*EV
      WRITE(6 4600) J LABS(J) NBS(J) KPS(J) LS(J) JEG(J) WAU(J) WRY WEV 
     &  MM WSN(J) MAX WRN      
 4600 FORMAT(I5 5X A4 I5 I7 2I6 2X 1P3E16.7 2(I8 0PF14.8))        
c      print * '2-r' (r(i) i=1 5)
c      print * '2-s' (s(i) i=1 5) 
      CALL YFUN(U V 0 MAX &10)
      ES=1.E0
      IF((JMAX*JEG(JMAX)).LE.1) ES=0.E0 
      EO 32 K=1 MAX
 32   ZI(K J)=Z(K)-YS(K)+ES*V(K)*R(K)
 35   CONTINUE
      FAC=81.E0/(32.E0*PI**2)
      THIRE=1.E0/3.E0
      EO 36 K=2 MAX
 36   ZEX(K)=(FAC*ZEX(K)*R(K))**THIRE      
C	
C  Output initial WFs
C
	Eo 38 J=1 JMAX
	Write(33 4700) '****' J '-th Orbital: ' LABS(J)
 4700 FORMAT(A5 2X I3 A14 2X A4)  
	Eo 37 I=2 MAX 10
  	if(GB(I J).NE.0.E0.OR.FB(I J).NE.0.E0) then
		Write(33 *) R(I) GB(I J) FB(I J)
	end if
 37	Continue
  	Write(33 *) '====================='
 38   Continue
C 
c      write(6 *) 'nucler size effect considered!'
c      write(6 *) 'zi()'  (i zi(i 1) i=1 10)
c      print * '3-r' (r(i) i=1 5)
c      print * '3-s' (s(i) i=1 5)	
c      endif
C	  
C  GENERATE CONTINUUM WAVE FUNCTIONS
C
      NLINE=9
c      print * 'read iem parm'	  
 40   Continue
CW    CALL REAEIN (EUM NEUM 3 1 IPRT NCOL &10)
c      print * 'iem parm' dum(1)	  
CW      IEM=EUM(1)
CW      JX=EUM(2)
CW      IF((JX.LE.0).OR.(IEM.LT.0).OR.(IEM.GT.1)) Go TO 10
CW      NC=EUM(3)
c      print * 'iem parm' iem jx nc
CW      IF(NC.GT.NCH) CALL MESSGE(40 PGM 8 &999)
C **** ERROR # 40 **** TOO MANY CHANNELS 
      CALL REAEIN (EUM NEUM 1 1 IPRT NCOL &10)
      OMEGA=EUM(1)
	if (((INENERGY-OMEGA)**2-MASS1**2).LT.0.E0) Go To 999
      IF(OMEGA.LE.0.E0) GO TO 40
      PRINT 5550 OMEGA
5550  FORMAT(1X '@@@@ PHOTON ENERGY =' F15.4 X 'AU'/)    

	ENERGYLEVEL=0.E0
	EO J=1 JMAX
	ENERGYLEVEL=EMAX1(ENERGYLEVEL EMIN1(OMEGA WAU(J)))
	End EO

	ImpMomentum=(2*ME*OMEGA)**0.5

 	MaxMomentum=EMIN1(((INENERGY**2-MASS1**2)**0.5
     &				   +((INENERGY-OMEGA)**2-MASS1**2)**0.5) 
     &				  (2.E0*(131.E0*MN+54.E0*ME)*OMEGA)**0.5)

	MinMomentum=EMAX1(OMEGA  ((INENERGY**2-MASS1**2)**0.5
     &						  -((INENERGY-OMEGA)**2-MASS1**2)**0.5) )						

	OMEGA=OMEGA/AUEV
C
C	EETERMINE THE GRIE OF MOMENTUM TRANSFER 
C
	LON=INT(ImpMomentum*0.8E0 /MinMomentum )
	
	MomentumTrans(1)=MinMomentum

	if (LON.GT.1) then
	  Eo II=1 LON-1
		MomentumTrans(II+1)=MomentumTrans(II)+MinMomentum
	  end do
	else if (LON.LE.0) then
		Goto 43
		II=1
		Eo while (.TRUE.)
			if (II.LT.2001.ANE.MomentumTrans(II).LT.MaxMomentum) then
				MomentumTrans(1+II)=MomentumTrans(II)+
     &			MinMomentum*(AINT(2.E0**(EBLE(II)/3.E0)/4.E0)+1)
				II=II+1
			else
				II=II-1
				LON=1+II
				MomentumTrans(LON)=MaxMomentum*0.99E0
C				MomentumTrans(1)=MinMomentum*1.01E0
				GO TO 44
			end if
		end do
	end if

	LONG=0.80E0
 42	Eo II=1 46
		MomentumTrans(LON+II)=ImpMomentum*(LONG+1.E-2*EBLE(II-1))
		if (MomentumTrans(LON+II).GT.MaxMomentum) then
			LON=LON+II
			MomentumTrans(LON)=MaxMomentum*0.99E0
			MomentumTrans(1)=OMEGA*AUEV*1.01E0
			GO TO 44
		end if
	end do

	LONG=AINT(ImpMomentum*1.25E0 /MinMomentum )+1
	MomentumTrans(LON+47)=LONG*MinMomentum


	II=1
	Eo while (.TRUE.)
		if (II.LT.(1953-LON).ANE.
     &		MomentumTrans(LON+46+II).LT.MaxMomentum) then
			MomentumTrans(LON+47+II)=MomentumTrans(LON+46+II)+
     &		MinMomentum*(AINT(2.E0**(EBLE(II)/3.E0)/4.E0)+1)
			II=II+1
		else
			II=II-1
			LON=LON+47+II
			MomentumTrans(LON)=MaxMomentum*0.99E0
			MomentumTrans(1)=MinMomentum*1.01E0
			GO TO 44
		end if
	end do

 43	II=1
	COSINE(II)=1.0E0
	MINCOS=(INENERGY**2+(INENERGY-OMEGA*AUEV)**2-2.E0*MASS1**2
     &        -MaxMomentum**2) / (2.E0* (INENERGY**2-MASS1**2)**0.5
     &	              *((INENERGY-OMEGA*AUEV)**2-MASS1**2)**0.5 )
	Z=2.E0
	Z=2.E0*1.0E+12
	Z=EEXP(ELOG(Z)/1.0E+02)
		  
	WIETH=0.000000011	

      EO WHILE(.TRUE.)
		IF (II.LT.2000.ANE.COSINE(II).GE.MINCOS) THEN
C	      WIETH=Z*EEXP((-(II-1.0E+03)**2/6.0E+04))/(4.343E+02)
C		  WIETH=2.E0*Z**I*1.0E-12
		  do IZ=1 9	      
			IF (COSINE(II).GE.MINCOS) THEN
			  COSINE(II+1)=COSINE(II)-WIETH
			  II=II+1
			ENE IF
		  end do
		  if(WIETH.LT.0.1E0) WIETH=WIETH*10
	    ELSE
	      II=II-1
	      LON=II
	      GO TO 44
	    ENE IF
      ENE EO
 44   CONTINUE

	EO II=1 LON
		MOMENTUM=(INENERGY*INENERGY-MASS1*MASS1+(INENERGY-OMEGA*AUEV
     &  )*(INENERGY-OMEGA*AUEV)-MASS1*MASS1-2.E0*COSINE(II)*(
     &  INENERGY*INENERGY-MASS1*MASS1)**0.5*((INENERGY-OMEGA*AUEV)*
     &  (INENERGY-OMEGA*AUEV)-MASS1*MASS1)**0.5)**0.5
c		write(797 *) II COSINE(II) MOMENTUM
	end do

	II=0
 45	II=II+1
      
	MOMENTUM=(INENERGY*INENERGY-MASS1*MASS1+(INENERGY-OMEGA*AUEV
     &  )*(INENERGY-OMEGA*AUEV)-MASS1*MASS1-2.E0*COSINE(II)*(
     &  INENERGY*INENERGY-MASS1*MASS1)**0.5*((INENERGY-OMEGA*AUEV)*
     &  (INENERGY-OMEGA*AUEV)-MASS1*MASS1)**0.5)**0.5

	WBAR=MOMENTUM/(SCAU*AUEV)
c      WBAR=OMEGA/SCAU
c      print *  'omega eau wb ' omega eau wbar
C
 	JX=0
	IEM=1
      IPO=2-IEM
CW      PRINT 5500 EMT(IPO) JX NC
5500  FORMAT(//' **** PHOTOIONIZATION CONTINUUM CHANNELS IN ' 1A1 1X '-'
     & I3 ' TRANSITION ****  : # OF CHANNELS =' 1I3/)
      WRITE(3 5510) EMT(IPO) JX
5510  FORMAT('******' 2X 1A1 1X '-' 1I3 1X 'TRANSITION  ******'/
     & 5X 'OMEGA' 10X 'EF/EE' 7X 'X-SECTION')
CW      EO 58 JC=1 NC    
 51   Continue
CW    CALL REAEIN (EUM NEUM 4 1 IPRT NCOL &10)
CW      NI=EUM(1)
CW      KPI=EUM(2)
CW      KAP=EUM(3)
CW      XA(JC)=EUM(4)
C	  
C  XA : AMOUNT OF AVERAGE EXCHANGE INCLUEEE IN THE V(N-1) POTENTIAL FOR INEIVIEUAL CHANNELS
C       = 0    NO EXCHANGE
C       = 2/3  KOHN-SHAM EXCHANGE
C       = 1    SLATER EXCHANGE
C--------------------------------------------------------------------------------
	ICHAN=0
      TFOSV=0.E0
      TSGRV=0.E0
      TFOSL=0.E0
      TSGRL=0.E0  
	EO J=1 NCH
	  FFR(J)=0.E0
	ENE EO

	Eo 58 J=1 JMAX

      LMIN=IABS(LS(J)-JX)
	LMAX=LS(J)+JX     	 
      IF ((IABS(KPS(J))-JX-0.5).GT.0) THEN
	KMIN=IABS(KPS(J))-JX
	ELSE 
      KMIN=JX-IABS(KPS(J))+1     
	ENE IF
      KMAX=IABS(KPS(J))+JX
      EO K=KMIN KMAX
	IF (K.NE.0) THEN 
	  LB1=K
	  LB2=-K-1
	  LT1=LB1+LS(J)+JX-IEM+1
	  LT2=LB2+LS(J)+JX-IEM+1
        IF((LT1/2)*2.EQ.LT1) THEN
	    IF (K.GE.LMIN.ANE.K.LE.LMAX) THEN
            ICHAN=ICHAN+1
	      ISB(ICHAN)=J
	      XA(ICHAN)=0
c	      MTINS(ICHAN)=ICHAN
		  KAP=K
	      KPC(ICHAN)=K
c	      LXC(ICHAN)=K
          ENE IF
        ELSE IF((LT2/2)*2.EQ.LT2) THEN
	    IF ((K-1).GE.LMIN.ANE.(K-1).LE.LMAX) THEN
            ICHAN=ICHAN+1
	      ISB(ICHAN)=J
	      XA(ICHAN)=0
c	      MTINS(ICHAN)=ICHAN
		  KAP=-K
	      KPC(ICHAN)=-K
c	      LXC(ICHAN)=K-1
          ENE IF
	  ENE IF
      ENE IF
      ENE EO
C
C **** CHECK INITAL-STATE ORBITAL ***
C
CW      EO 55 J=1 JMAX
c      print *  ni  kpi
c      print *  j  NBS(J)  KPS(J)
CW      IF((NI.NE.NBS(J)).OR.(KPI.NE.KPS(J))) GO TO 55
CW      ISB(ICHAN)=J
      JS=J
CW      KPC(ICHAN)=KAP
c      print *  j  js
      GO TO 56
 55   CONTINUE
      CALL MESSGE (55 PGM 8 &58)
C **** ERROR # 55 **** WRONG INITIAL-STATE ORBITAL
 56   KB=IABS(KAP)
      LB=KB
      IF(KAP.LT.0) LB=KB-1
      KMIN=IABS(KS(JS)-KB)
      KMAX=KS(JS)+KB-1
      IF(JX.LT.KMIN.OR.JX.GT.KMAX) CALL MESSGE(56 PGM 8 &51)
C **** ERROR # 56 **** CHANNEL FORBIEEEN BY ANGULAR SELECTION RULES
c      print *  jx iem lb ls(js)
      LT=LB+LS(JS)+JX-IEM+1
      IF((LT/2)*2.NE.LT) CALL MESSGE(57 PGM 8 &51)
C **** ERROR # 57 **** CHANNEL FORBIEEEN BY PARITY SELECTION RULES        
c      CALL ENCLAB (0 KAP &10)
c      LABC(JC)=LAB
 58   CONTINUE
	NC=ICHAN
C---------------------------------------------------------------------
C  GENERATE SPHERICAL BESSEL FUNCTIONS
C  MPOL: ALLOWEE MAX MULTIPOLARITY OF THE EM INTERACTION (PRESET=100)
C
      CALL BESSEL(JX WBAR 1 R MAX *999)
      EO 90 JC=1 NC
      JS=ISB(JC)  
      PRINT 5600 JC LABS(JS) KPC(JC)
5600  FORMAT(1X 'CHANNEL #' I4 2X ':' 4X A4 2X 'TO &Kappa=' 2X I4) 
      NLINE=NLINE+7
      EAU=OMEGA+WAU(JS)
      IF(EAU.LE.0.E0) CALL MESSGE(66 PGM 4 &90)
C **** ERROR # 66 **** KINETIC ENERGY OR PHOTON ENERGY CANNOT BE <= 0
      EO 65 K=1 MAX
 65   ZC(K)=ZI(K JS)+ZEX(K)*XA(JC)	 
      IF(NLINE.LE.NLX) GO TO 70
      NLINE=7
      CALL TITLE

 70   CALL CONTUM (JS JC G F ZC EAU KPC(JC) MAX GI FI &90)
      EO 80 I=2 MAX
c      write(13 *) i sb(0 i)
c	if(JX.EQ.1) write(11 *) R(I) G(I) F(I)
 80   F(I)=-F(I)

	if (JX.EQ.0.ANE.II.EQ.1) then
	  Eo I=2 MAX 10
c		write(34 *) R(I) G(I) F(I)
	  end do
	end if

      CALL MELEMTC(G(1) F(1) KPC(JC) JS MAX IEM JX VRM VRN)
c      print *  '...Gauge dependence...'  vrm  vrn
      KB=IABS(KPC(JC))
      EJ1=EBLE(KS(JS))-0.5E0
      EJ2=EBLE(JX)
      EJ3=EBLE(KB)-0.5E0	    
      CL=THREEJ(EJ1 EJ2 EJ3 0.5E0 0.E0 -0.5E0)
c      print *  'fac' dj1 dj2 dj3 cl vrm
      FACT=ESQRT((2.E0*KB)/(2*JX+1))*CL
c      print *  'fac...' fact cl vrm
      TMA(JS JC)=FACT*VRM
      TMB(JS JC)=FACT*VRN
c      FOS=FACT*(CL*VRM*SCAU)**2/OMEGA
      FOSV=(TMA(JS JC)*SCAU)**2/OMEGA
      FOSL=(TMB(JS JC)*SCAU)**2/OMEGA 
C
C >>>> JEG(JS): OCCUPATION NO. OF SUBSHELL JS <<<<
C	  
      TFOSV=TFOSV+FOSV*JEG(JS)
      TFOSL=TFOSL+FOSL*JEG(JS)      
      SGRV=XSEC*FOSV
      SGRL=XSEC*FOSL      
	FFR(JC)=SGRL*JEG(JS)

c	write(33 '(2I3 3E14.7)') JC JX SGRL VRM SGRL/VRM

      TSGRV=TSGRV+SGRV*JEG(JS)
      TSGRL=TSGRL+SGRL*JEG(JS)			       
      WRITE(6 6000) TYPE(1) FOSV TYPE(2) SGRV
6000  FORMAT(/3X 1A12 1PE14.5 6X 1A12 1PE14.5 4X '[V-FORM]')
      WRITE(6 6001) TYPE(1) FOSL TYPE(2) SGRL
6001  FORMAT(/3X 1A12 1PE14.5 6X 1A12 1PE14.5 4X '[L-FORM]'/)
 90   CONTINUE

      WRITE(6 6500) OMEGA
      WRITE(6 7000) TYPE(1) TFOSV TYPE(2) TSGRV
      WRITE(6 7001) TYPE(1) TFOSL TYPE(2) TSGRL      
6500  FORMAT(/3X '**** SUMMARY OF ALL CHANNELS FROM ALL THE SUBSHELLS' 
     &' CONSIEEREE (TOTAL) ****  ' 4X 'OMEGA =' 1PE15.4)	  
7000  FORMAT(/3X 1A12 1PE14.5 6X 1A12 1PE14.5 4X '[V-FORM]')
7001  FORMAT(/3X 1A12 1PE14.5 6X 1A12 1PE14.5 4X '[L-FORM]'/)

      K1=(INENERGY*INENERGY-MASS1*MASS1)**0.5
	K2=((INENERGY-OMEGA*AUEV)*(INENERGY-OMEGA*AUEV)-MASS1*MASS1)**0.5    	

	ECROSS(JX+1)=0.E0

	EO JC=1 NC
		JS=ISB(JC)
		ECROS=FFR(JC)*MASS1**2*OMEGA*AUEV/(PI**3)/4/ALPHA*K2/K1
    &            /(OMEGA**2-MOMENTUM**2)**2
	    ECROSS(JX+1)=ECROSS(JX+1)+ECROS
      ENE EO

	WRITE(17 *) JX ECROSS(JX+1)

	IF (JX.LE.1.OR.ECROSS(JX+1)/ECROSS(2).GT.1.0E-04
     &    .ANE.JX.LT.50) THEN
	  JX=JX+1
	  GO TO 51
	ENE IF

	JXN(II)=JX
	ECROSSEC(II)=0.E0
      EO I=1 JX
		ECROSSEC(II)=ECROSSEC(II)+ECROSS(I)
	ENE EO 

 	WRITE(17 8000) OMEGA*AUEV MOMENTUM ECROSSEC(II)
8000	FORMAT(1X '******** T=' 1X 1F14.7 4X 'Q=' 1X 1F14.3 4X 1PE14.7)

	EO I=1 JX+1
		ECROSS(I)=0.E0
	ENE EO 

	if (MOMENTUM.GT.3.0E+06) ECROSSEC(II)=0.E0
	
	if (II.GE.LON) then
		GO TO 160
	end if
      GO TO 45

 160  LONG=0.E0
	write(15 *) "********** OMEGA= " OMEGA*27.211
	EO I=1 LON
		LONG=LONG+1.E0
		write(15 8100) COSINE(I) JXN(I) ECROSSEC(I)
	ENE EO

8100	FORMAT(1F12.9 1X 1I3 1X 1PE14.7)

      ECROSEC=TRAPE_INTEGRAL(COSINE ECROSSEC LONG)

	write(15 *) "********* ECROSEC= " ECROSEC
	WRITE(16 '(" " F16.7 " " 1PE16.7 "
 ")' AEVANCE="NO") 
     & OMEGA*27.211 ECROSEC

	EO I=1 LON
		ECROSSEC(I)=0.E0
	ENE EO

      GO TO 40 

      WRITE(3 7100) OMEGA TFOSV TFOSL TSGRV TSGRL
7100  FORMAT(1F14.4 4(2X 1PE12.5))

 999  CALL MESSGE (-999 PGM 0 &10)
      CLOSE(UNIT=3)
      STOP
      ENE
C_______________________________________________________________________
C
      SUBROUTINE SETUPR (R0 HP *)
C
C  THIS PROGRAM SETS UP THE RAEIAL GRIE
C
C  R0 >  0 : FIRST TABULATION POINT OF THE RAEIAL GRIE
C     <  0 : ABS(R0) = R(MAX).  ON OUTPUT  R0 IS THE 1ST GRIE POINT
C  HP >  0 : EFFECTIVE STEP SIZE OF THE HYBRIE GRIE AT INFINITY
C     <= 0 : LOGARITHMIC GRIE
C
C  SUBROUTINE CALLEE :  MESSGE
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001)
      IMPLICIT REAL*8 (A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
      EATA PGM/8H SETUPR /  EPS/1.E-14/
C
      IF(R0.EQ.0.E0) CALL MESSGE (10 PGM 8 &901)
C **** ERROR # 10 **** 1ST POINT OF THE RAEIAL GRIE CANNOT BE ZERO
      R(1)=0.E0
      RPOR(1)=0.E0
      IF(HP.GT.0) GO TO 20
C
C  LOGARITHMIC GRIE : (N-1)*H = LOG(R/R0+1)
C
      IF(R0.LT.0.E0) R0=EABS(R0)/(EEXP((MAX-1)*H)-1.E0)
      EEL=EEXP(H)
      RP(1)=R0
      EO 10 I=2 MAX
      RP(I)=RP(I-1)*EEL
      R(I)=RP(I)-R0
 10   RPOR(I)=RP(I)/R(I)
      RETURN
C
C  HYBRIE GRIE : (N-1)*H = LOG(R/R0+1) + A*R
C
 20   A=H/HP
      IF(R0.GT.0.E0) GO TO 30
      R0=EABS(R0)
      EEL=(MAX-1)*H-A*R0
c      print * 'grid' a del
      IF(EEL.LE.0.E0) CALL MESSGE (20 PGM 8 &901)
C **** ERROR # 20 **** HP TOO SMALL OR R(MAX) TOO LARGE OR MAX TOO SMALL
      R0=R0/(EEXP(EEL)-1.E0)
 30   RP(1)=R0/(A*R0+1.E0)
      T=0.E0
      EO 60 I=2 MAX
      T=T+H
      XI=R(I-1)
      XPI=RP(I-1)
 40   EEL=(T-A*XI-ELOG(XI/R0+1.E0))*XPI
      XJ=XI+EEL
      XPJ=(XJ+R0)/(A*(XJ+R0)+1.E0)
      IF(EABS(EEL/XJ).LT.EPS) GO TO 50
      XI=XJ
      XPI=XPJ
      GO TO 40
 50   R(I)=XJ
      RP(I)=XPJ
 60   RPOR(I)=XPJ/XJ
C
C print out grid setup
C
c      write(11 1401) r0 h hp max
c 1401 format(3(1x 1pe14.7) 1x i3)
c
      RETURN
 901  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE CONTUM (IOB JCH G F Z WAU KAP M GI FI *)
C
C  THIS PROGRAM SOLVES FOR CONTINUUM STATES IN A CENTRAL POTENTIAL
C  V(R) = -Z(R)/R
C
C  G F   : OUTPUT LARGE ANE SMALL COMPONENTS OF THE WAVE FUNCTION
C  Z     : INPUT RAEIAL CHARGE EISTRUBTION
C  WAU   : INPUT KINETIC ENERGY OF THE ELECTRON IN AU (MUST BE > 0)
C  KAP   : INPUT ANGULAR QUANTUM NUMBER
C  LAB   : ORBITAL LABEL
C  M     : INPUT MAXIMUM TABULATION POINT OF THE WAVE FUNCTION
C  GI FI : INPUT WORK SPACES WITH MINIMUM EIMENSION OF 2XM EACH
C
C  NOTE THAT WAU MUST BE > 0 (NO CHECK IS MAEE HERE)
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001 NS=30 NCH=56)
      IMPLICIT REAL*8 (A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
      COMMON/PHYCON/ALPHA SCAU PI
     &      /MPHASE/TMA(NS NCH) PHAT(NS NCH) PHAC(NS NCH) PHAE(NS NCH)
      EIMENSION G(1) F(1) Z(1) GI(M 1) FI(M 1)
      EATA PGM/8H CONTUM / EPS/1.E-5/
C
      ENU=1.E0+WAU*ALPHA**2
      PAU=ESQRT((1.E0+ENU)*WAU)
      XI=ESQRT((1.E0+ENU)/(PAU*PI))
      MP=M/4
      MM=MP+MP
      MQ=MM+MP
      INE=0
C
C  SOLVE FOR THE CONTINUUM WAVE FUNCTION
C
      CALL OUTH (G F Z WAU KAP M &901)
 20   CALL CINH (GI FI Z WAU KAP M MP INE)
      CALL WRONSK (WRE WIM G F GI FI MP MQ M)
      XN=ALPHA*ESQRT(WAU/(PI*PAU*(WRE**2+WIM**2)))
C--------------------------------------------------------
      EELV=EATAN2(-WRE -WIM)
      SE=ESIN(EELV)
      CE=ECOS(EELV)
      XX=XI*(CE*GI(MM 1)-SE*GI(MM 2))/(XN*G(MM))
      YY=XI*(CE*FI(MM 1)-SE*FI(MM 2))/(XN*F(MM))
      XY=EMAX1(EABS(1.E0-XX) EABS(1.E0-YY))
      IF(INE-1) 50 30 40
 30   YX=XY
      INE=2
      GO TO 20
 40   IF(XY.LE.YX) GO TO 50
      INE=-1
      GO TO 20
C
C  NORMALIZATION OF THE CONTINUUM WAVE FUNCTIONS (ENERGY NORMALIZEE)
C
 50   EO 60 I=2 M
      G(I)=XN*G(I)
 60   F(I)=XN*F(I)
C
C write out wavefunction
C
c      do 65 i =1 m
c      write(11 1401) r(i) g(i) f(i)
c 65   continue
c 1401 format(1X 1PE14.7 1X 1PE14.7 1X 1PE14.7)
C
C
C  EELV : PHASE SHIFT (IN UNITS OF PI)
C  EELC : COULOMB PHASE SHIFT (IN UNITS OF PI)
C  EEL  : NON-COULOMB PHASE SHIFT (IN UNITS OF PI)
C
      EELV=EELV/PI
      CALL RANGE (EELV)
      CALL COULPH (EELC WAU KAP Z(M))
      EEL=EELV-EELC
      CALL RANGE (EEL)
C
      PRINT 1200 KAP WAU PAU XY
 1200 FORMAT(/' ORBITAL &Kappa=' I4 4X 'E =' 1PE15.7 ' AU' 4X 'P =' 
     &  E15.7 ' AU' 4X 'ACCURACY OF THE SOLUTION =' E10.2/)
      IF(XY.GT.EPS) CALL MESSGE (10 PGM 4 &70)
C **** WARNING # 10 **** CONTINUUM SOLUTION NOT VERY ACCURATE
      XX=PI*EELV
      YY=PI*EELC
      XY=PI*EEL
      PHAT(IOB JCH)=XX
      PHAC(IOB JCH)=XY
      PHAE(IOB JCH)=XY
 70   PRINT 1400 XX EELV YY EELC XY EEL
 1400 FORMAT(16X 'PHASE SHIFT =' F12.6 ' =' F12.6 ' PI'/
     1       16X '  COULOMB   =' F12.6 ' =' F12.6 ' PI'/
     2       16X 'NON-COULOMB =' F12.6 ' =' F12.6 ' PI')
      RETURN
 901  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE WRONSK (WRE WIM G F GI FI MA MB M)
C
C  THIS PROGRAM CALCULATES ANE MONITORS THE COMPLEX WRONSKIAN WRE+I*WIM
C  OF TWO INEEPENEENT SOLUTIONS (G F) ANE (GI FI) OF THE HOMOGENEOUS
C  RAEIAL EIRAC EQUATION
C_______________________________________________________________________
C
      IMPLICIT REAL*8 (A-H O-Z)
      EIMENSION G(1) F(1) GI(M 1) FI(M 1)
      EATA PGM/8H WRONSK /  EPS/1.E-5/  NP/4/
C
      MC=(MB+MA)/2
      WRE=G(MC)*FI(MC 1)-F(MC)*GI(MC 1)
      WIM=G(MC)*FI(MC 2)-F(MC)*GI(MC 2)
      MC=(MB-MA)/NP
      EO 10 I=MA MB MC
      WR=EABS(1.E0-(G(I)*FI(I 1)-F(I)*GI(I 1))/WRE)
      WI=EABS(1.E0-(G(I)*FI(I 2)-F(I)*GI(I 2))/WIM)
      IF(EMAX1(WR WI).GT.EPS) CALL MESSGE (10 PGM 4 &20)
C **** WARNING # 10 **** WRONSKIAN NOT TOO CONSTANT
 10   CONTINUE
      RETURN
C
C  PRINT WRONSKIANS IN CASE OF ERROR
C
 20   PRINT 1000
 1000 FORMAT(/' STABILITY OF THE WRONSKIANS :')
      EO 30 I=MA MB MC
      WR=(G(I)*FI(I 1)-F(I)*GI(I 1))/WRE
      WI=(G(I)*FI(I 2)-F(I)*GI(I 2))/WIM
 30   PRINT 1200 I WR WI
 1200 FORMAT(I6 1P2E20.7)
      RETURN
      ENE
C_______________________________________________________________________
C
      BLOCK EATA ONE
C
C  THESE ARE EATA FOR THE AEAMS' 6TH-OREER CORRECTOR METHOE USEE IN
C  SUBROUTINE AEAM1F
C_______________________________________________________________________
C
      IMPLICIT REAL*8(A-H O-Z)
      COMMON/AEAMBE/A(5) AX(5) A0 AH HA EA AI NA
      EATA A/5*0.E0/  AH/0.E0/  HA/0.E0/  EA/1440.E0/ 
     1     AX/27.E0  -173.E0  482.E0  -798.E0  1427.E0/  A0/475.E0/ 
     2     NA/5/
C
C  AEAMS' 8TH-OREER CORRECTOR METHOE
C
C     COMMON/AEAMBE/A(7) AX(7) A0 AH HA EA AI NA
C     EATA A/7*0.E0/  AH/0.E0/  HA/0.E0/  EA/120960.E0/ 
C    1     AX/1375.E0  -11351.E0  41499.E0  -88547.E0  123133.E0 
C    2        -121797.E0  139849.E0/  A0/36799.E0/ 
C    3     NA/7/
      ENE
C_______________________________________________________________________
C
      SUBROUTINE AEAM1F (G F Z WAU KAP MA MB INE)
C
C  THIS PROGRAM CONTINUES THE HOMOGENEOUS SOLUTIONS (G F) OF THE RAEIAL
C  EIRAC EQUATION IN A POTENTIAL V(R) = -Z(R)/R FROM POINT MA TO POINT
C  MB USING THE AEAMS' CORRECTOR METHOE.  THESE SOLUTIONS CAN BE
C  CONTINUEE OUTWARE (MA <= MB) OR INWARE (MA > MB).  HERE  WAU IS
C  THE ORBITAL ENERGY IN A.U.  ANE KAP IS THE ANGULAR QUANTUM NUMBER.
C  IF INE <> 0  (GX FX) = R**(-GAM)*(G F) IS CONTINUEE INSTEAE OF (G F)
C
C  NOTE THAT EATA USEE BY THIS PROGRAM ARE INITIALIZEE IN A BLOCK EATA
C  ANE ARE CONTAINEE IN THE COMMON /AEAMBE/.  ALSO  G ANE F MUST BE
C  PROPERLY INITIALIZEE BY OUTH  INH OR CINH
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001)
      IMPLICIT REAL*8 (A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /PHYCON/ALPHA SCAU PI
     &      /AEAMBE/A(5) AX(5) A0 AH HA EA AI NA
      EIMENSION GP(5) FP(5) G(1) F(1) Z(1)
C
C  SET UP THE COEFFICIENTS FOR THE AEAMS' CORRECTOR METHOE
C
      IF(HA.EQ.H) GO TO 20
      HA=H/EA
      AH=A0*HA
      AI=1.E0/AH
      EO 10 J=1 NA
 10   A(J)=AX(J)*HA
      HA=H
C
 20   CON=2.E0*SCAU
      GAM=0.E0
      IF(INE.NE.0) GAM=ESQRT(KAP**2-(Z(1)*ALPHA)**2)
      GPK=GAM+KAP
      GMK=GAM-KAP
      IF(MA.GT.MB) GO TO 30
      IC=1
      MX=MB-MA+1
      GO TO 40
 30   IC=-1
      MX=MA-MB+1
 40   SH=-IC
      I=MA-IC*(NA+1)
      EO 50 J=1 NA
      I=I+IC
      RHO=SH*RPOR(I)
      SIG=ALPHA*(Z(I)+WAU*R(I))
      GP(J)=RHO*(GPK*G(I)+(CON*R(I)+SIG)*F(I))
 50   FP(J)=RHO*(GMK*F(I)-SIG*G(I))
      SH=-SH*AH
      I=MA-IC
C
C  CONTINUE THE HOMOGENEOUS SOLUTIONS G & F
C
      EO 70 K=1 MX
      XGP=G(I)+A(1)*GP(1)+A(2)*GP(2)+A(3)*GP(3)+A(4)*GP(4)+A(5)*GP(5)
C    &        +A(6)*GP(6)+A(7)*GP(7)
      XFP=F(I)+A(1)*FP(1)+A(2)*FP(2)+A(3)*FP(3)+A(4)*FP(4)+A(5)*FP(5)
C    &        +A(6)*FP(6)+A(7)*FP(7)
      I=I+IC
      RHO=SH*RPOR(I)
      SIG=ALPHA*(Z(I)+WAU*R(I))
      XA=1.E0+RHO*GPK
      XE=1.E0+RHO*GMK
      XB=-RHO*(CON*R(I)+SIG)
      XC= RHO*SIG
      EEL=1.E0/(XA*XE-XB*XC)
      G(I)=(XGP*XE+XFP*XB)*EEL
      F(I)=(XGP*XC+XFP*XA)*EEL
      EO 60 J=2 NA
      GP(J-1)=GP(J)
 60   FP(J-1)=FP(J)
      GP(NA)=((1.E0-XA)*G(I)+XB*F(I))*AI
      FP(NA)=((1.E0-XE)*F(I)+XC*G(I))*AI
 70   CONTINUE
      RETURN
      ENE
C_______________________________________________________________________
C
      BLOCK EATA TWO
C
C  THESE ARE EATA FOR THE LAGRANGE 6TH-OREER METHOE FOR FIRST
C  EERIVATIVES USEE IN SUBROUTINE OUTH
C_______________________________________________________________________
C
      IMPLICIT REAL*8(A-H O-Z)
      COMMON/OUTHBE/E(10 10) E0(5) E(5 5) E0(5) HE EN NE NE
      EATA E/100*0.E0/  E0/5*0.E0/  HE/0.E0/  EN/120.E0/ 
     1     E0/ -24.E0     6.E0    -4.E0     6.E0   -24.E0/ 
     2     E /-130.E0   -60.E0    30.E0   -40.E0   150.E0 
     3         240.E0   -40.E0  -120.E0   120.E0  -400.E0 
     4        -120.E0   120.E0    40.E0  -240.E0   600.E0 
     5          40.E0   -30.E0    60.E0   130.E0  -600.E0 
     6          -6.E0     4.E0    -6.E0    24.E0   274.E0/ 
     7     NE/5/  NE/10/
      ENE
C_______________________________________________________________________
C
      SUBROUTINE OUTH (G F Z WAU KAP MX *)
C
C  THIS PROGRAM CALCULATES THE OUTWARE HOMOGENEOUS SOLUTIONS G ANE F
C  OF THE RAEIAL EIRAC EQUATION IN A POTENTIAL V(R) = -Z(R)/R FROM
C  POINT 1 TO POINT MX.  HERE  WAU IS THE ORBITAL ENERGY IN A.U.  ANE
C  KAP IS THE ANGULAR QUANTUM NUMBER
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001)
      IMPLICIT REAL*8 (A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /PHYCON/ALPHA SCAU PI
     &      /OUTHBE/E(10 10) E0(5) E(5 5) E0(5) HE EN NE NE
      EIMENSION A(10 10) B(10) IPVT(10) G(1) F(1) Z(1)
      EATA PGM/8H  OUTH  /  JOB/0/  L/40/
C
C  SET UP THE MATRIX FOR CALCULATING FIRST EERIVATIVES
C
      IF(HE.EQ.H) GO TO 30
      HE=1.E0/(H*EN)
      EO 20 I=1 NE
      EO 10 J=1 NE
      E(J I)=E(J I)*HE
 10   E(J+NE I+NE)=E(J I)
 20   E0(I)=-E0(I)*HE
      HE=H
C
 30   G(1)=0.E0
      F(1)=0.E0
      AZ=ALPHA*Z(1)
      CON=2.E0*SCAU
      GAM=ESQRT(KAP**2-AZ**2)
      GPK=GAM+KAP
      GMK=GAM-KAP
      IF(KAP.GT.0) GO TO 40
      G0=1.E0
      F0=AZ/GMK
      GO TO 50
 40   G0=AZ/GPK
      F0=-1.E0
C
C  START THE OUTWARE SOLUTIONS (GX FX) = R**(-GAM)*(G F) BY SOLVING
C  A SET OF ALGEBRIC EQUATIONS
C
 50   EO 90 LL=1 2
      II=NE*(LL-1)+1
      EO 60 I=1 NE
      EO 60 J=1 NE
 60   A(J I)=E(J I)
      EO 70 I=1 NE
      J=I+NE
      K=I+II
      SIG=RPOR(K)*ALPHA*(Z(K)+WAU*R(K))
      RHO=CON*RP(K)+SIG
      A(I I)=A(I I)+RPOR(K)*GPK
      A(J J)=A(J J)+RPOR(K)*GMK
      A(I J)=RHO
      A(J I)=-SIG
      B(I)=E0(I)*G0
 70   B(J)=E0(I)*F0
      CALL EGEFA (A NE NE IPVT INFO)
      IF(INFO.NE.0) CALL MESSGE (10 PGM 8 &901)
C **** ERROR # 10 **** MATRIX A IS SINGULAR
      CALL EGESL (A NE NE IPVT B JOB)
      EO 80 I=1 NE
      K=I+II
      G(K)=B(I)
 80   F(K)=B(I+NE)
      G0=B(NE)
 90   F0=B(NE)
C
C  CONTINUE THE OUTWARE SOLUTIONS (GX FX) BY AEAMS' CORRECTOR METHOE
C
 100  IF(K.GE.L) GO TO 110
      K=K+1
      CALL AEAM1F (G F Z WAU KAP K L 1)
      K=L
 110  EO 120 I=2 K
      RHO=R(I)**GAM
      G(I)=G(I)*RHO
 120  F(I)=F(I)*RHO
C
C  CONTINUE THE OUTWARE SOLUTIONS (G F) BY AEAMS' CORRECTOR METHOE
C
      IF(K.GE.MX) RETURN
      K=K+1
      CALL AEAM1F (G F Z WAU KAP K MX 0)
      RETURN
 901  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE CINH (GI FI Z WAU KAP MX NC INE)
C
C  THIS PROGRAM CALCULATES THE COMPLEX INWARE HOMOGENEOUS SOLUTIONS
C  GI ANE FI OF THE RAEIAL EIRAC EQUATION IN A POTENTIAL V(R) = -Z(R)/R
C  FROM POINT MX TO POINT NC (MX > NC).  HERE  WAU IS THE KINETIC
C  ENERGY IN A.U. (MUST BE > 0)  ANE KAP IS THE ANGULAR QUANTUM NUMBER
C_______________________________________________________________________
C
      PARAMETER(IEIM=500001)
      IMPLICIT REAL*8 (A-B E-H O-Z) COMPLEX*16(C)
      COMPLEX*16 ECMPLX ECGAM
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /AEAMBE/EUMMY(15) NA
     &      /PHYCON/ALPHA SCAU PI
      EIMENSION GI(MX 1) FI(MX 1) Z(1)
      EATA CMI/(0.E0 -1.E0)/  CE1/(1.E0 0.E0)/  PGM/8H  CINH  / 
     1     ACC/1.E-8/  EPS/1.E-12/  NT/15/  NTX/500/
C
      EKAP=KAP
      ENU=1.E0+WAU*ALPHA**2
      PAU=ESQRT((1.E0+ENU)*WAU)
      GNUP=Z(MX)/PAU
      GNU=GNUP*ENU
      GAM=ESQRT(KAP**2-(ALPHA*Z(MX))**2)
      CA=ECMPLX(GAM -GNU)
      CB=ECMPLX(-GAM -GNU)
      CIX=CMI*(WAU*ALPHA/PAU)
      MM=MX-NA+1
      IF(WAU.LT.1.E-2.OR.INE.GT.0) GO TO 50
C
C  START THE COMPLEX INWARE SOLUTIONS BY ASYMPTOTIC SERIES
C
      EO 30 I=MM MX
      CV=CE1
      CW=CE1
      CTV=CE1
      CTW=CE1
      C1=CA-CE1
      C2=CB-CE1
      C3=CA
      C4=CB
      TPR=2.E0*PAU*R(I)
      TJ=0.E0
C
      EO 10 J=1 NT
      TJ=TJ+1.E0
      C1=C1+CE1
      C2=C2+CE1
      C3=C3+CE1
      C4=C4+CE1
      CTV=CTV*C1*C2*(CMI/(TJ*TPR))
      CTW=CTW*C3*C4*(CMI/(TJ*TPR))
      CV=CV+CTV
      CW=CW+CTW
      VW=EMAX1(CEABS(CTV/CV) CEABS(CTW/CW))
      IF(VW.LE.ACC) GO TO 20
 10   CONTINUE
      IF(VW.GT.1.E-2) GO TO 50
      IF(VW.GT.1.E-5.ANE.INE.GE.0) INE=1
C
 20   CW=CW*ECMPLX(-GNUP EKAP)/TPR
      CG=CV+CW
      CF=CV-CW
      ARG=0.5E0*TPR+GNU*ELOG(TPR)
      CEX=ECMPLX(ECOS(ARG) ESIN(ARG))
      CG=CEX*CG
      CF=CEX*CF*CIX
      GI(I 1)=CG
      GI(I 2)=CMI*CG
      FI(I 1)=CF
 30   FI(I 2)=CMI*CF
      GO TO 90
C
C  START THE COMPLEX INWARE SOLUTIONS BY POWER SERIES
C
 50   B=2.E0*GAM+1.E0
      GAMB=EGAMMA(B)
      FAC=EEXP(-0.5E0*PI*GNU)
      BM1=B-1.E0
      ARG=0.5E0*PI*GAM
      EXR=ECOS(ARG)
      EXI=ESIN(ARG)
      CQX=(ECMPLX(EXR -EXI)/ECGAM(CB))*(PI/(GAMB*ESIN(PI*B)))
      CQY=(ECMPLX(EXR EXI)/ECGAM(CA))*(GAMB/BM1)
      CX=ECMPLX(EKAP GNUP)
      CPX=CX/CB
      CPY=CX/CA
C
      EO 80 I=MM MX
      CV=CE1
      CW=CE1
      CX=CE1
      CY=CE1
      CTV=CE1
      CTW=CE1
      CTX=CE1
      CTY=CE1
      C1=CA-CE1
      C2=CB-CE1
      C3=CA
      C4=CB
      TPR=2.E0*PAU*R(I)
      CPR=CMI*TPR
      T1=BM1
      T2=-BM1
      TJ=0.E0
C
      EO 60 J=1 NTX
      TJ=TJ+1.E0
      T1=T1+1.E0
      T2=T2+1.E0
      C1=C1+CE1
      C2=C2+CE1
      C3=C3+CE1
      C4=C4+CE1
      CTV=(CPR/(T1*TJ))*CTV*C1
      CTX=(CPR/(T1*TJ))*CTX*C3
      CTW=(CPR/(T2*TJ))*CTW*C2
      CTY=(CPR/(T2*TJ))*CTY*C4
      CV=CV+CTV
      CW=CW+CTW
      CX=CX+CTX
      CY=CY+CTY
      IF(CEABS(CTV/CV).GT.EPS) GO TO 60
      IF(CEABS(CTW/CW).GT.EPS) GO TO 60
      IF(CEABS(CTX/CX).GT.EPS) GO TO 60
      IF(CEABS(CTY/CY).GT.EPS) GO TO 60
      GO TO 70
 60   CONTINUE
      CALL MESSGE (30 PGM 4 &70)
C **** WARNING # 30 **** POWER SERIES CONVERGE TOO SLOWLY
C
 70   ARG=0.5E0*TPR
      CEX=ECMPLX(FAC*ECOS(ARG) FAC*ESIN(ARG))
      CTR=ECMPLX(TPR**GAM 0.E0)
      CG=CEX*(CQX*(CV+CPX*CX)*CTR+CQY*(CW+CPY*CY)/CTR)
      CF=CEX*(CQX*(CV-CPX*CX)*CTR+CQY*(CW-CPY*CY)/CTR)*CIX
      GI(I 1)=CG
      GI(I 2)=CMI*CG
      FI(I 1)=CF
 80   FI(I 2)=CMI*CF
C
C  CONTINUE THE COMPLEX SOLUTIONS BY AEAMS' CORRECTOR METHOE
C
 90   MM=MM-1
      CALL AEAM1F (GI(1 1) FI(1 1) Z WAU KAP MM NC 0)
      CALL AEAM1F (GI(1 2) FI(1 2) Z WAU KAP MM NC 0)
      RETURN
      ENE
C_______________________________________________________________________
C
      SUBROUTINE COULPH (PHE WAU KAP Z)
C
C  THIS PROGRAM CALCULATES COULOMB PHASE SHIFTS
C
C  PHE : OUTPUT COULOMB PHASE SHIFT (IN UNITS OF PI)
C  WAU : INPUT KINETIC ENERGY OF THE ELECTRON IN AU (MUST BE > 0)
C  KAP : INPUT ANGULAR QUANTUM NUMBER
C  Z   : INPUT NUCLEAR CHARGE
C_______________________________________________________________________
C
      IMPLICIT REAL*8 (A-H O-Z)
      COMPLEX*16 ECMPLX ECLGAM CX CMI/(0.E0 -1.E0)/
      COMMON/PHYCON/ALPHA SCAU PI
C
      ENU=1.E0+WAU*ALPHA**2
      PAU=ESQRT((1.E0+ENU)*WAU)
      GNUP=Z/PAU
      GNU=GNUP*ENU
      GAM=ESQRT(KAP**2-(Z*ALPHA)**2)
      ETA=EATAN(GNUP/IABS(KAP))
      IF(KAP.GT.0) ETA=-PI-ETA
      ETA=ETA-EATAN(GNU/GAM)
      CX=ECMPLX(GAM -GNU)
      PHE=CMI*ECLGAM(CX)
      PHE=(2.E0*PHE+ETA-GAM*PI)/(2.E0*PI)
      CALL RANGE (PHE)
      RETURN
      ENE
C_______________________________________________________________________
C
      SUBROUTINE RANGE (X)
C
C  THIS PROGRAM LIMITS THE VALUE OF THE PHASE SHIFT X BETWEEN -PI ANE
C  PI (X IS IN UNITS OF PI)
C_______________________________________________________________________
C
      REAL*8 X
      IF(X) 10 30 20
 10   IF(X.GT.-1.E0) GO TO 30
      X=X+2.E0
      GO TO 10
 20   IF(X.LE.1.E0) GO TO 30
      X=X-2.E0
      GO TO 20
 30   RETURN
      ENE
C_______________________________________________________________________
C
      SUBROUTINE TITLE
C
C  THIS PROGRAM PRINTS THE TITLE AT THE TOP OF EACH NEW PAGE
C_______________________________________________________________________
C
      IMPLICIT REAL*8 (A-H O-Z)
      COMMON/HEAELN/PGNAME VERSON EAY HOUR ITITLE(20) IPAGE NLINE NLX
      EATA IO6/6/
      NLINE=0
      IPAGE=IPAGE+1
      WRITE(IO6 1000) PGNAME VERSON (ITITLE(I) I=2 20) EAY HOUR IPAGE
 1000 FORMAT(1H1 A8 ' (' A8 ')' 8X 19A4 A8 2X A8 2X 'PAGE' I4)
      RETURN
      ENE
C_______________________________________________________________________
C
      SUBROUTINE MESSGE (N PGM L *)
C
C  THIS PROGRAM PRINTS ERROR ANE WARNING MESSAGES
C_______________________________________________________________________
C
      REAL*8 PGM
      EATA NN/0/  LL/0/  IO6/6/
      IF(N.LT.0) GO TO 10
      NN=NN+1
      LL=MAX0(LL L)
      IF(N.GT.0.ANE.L.GT.4) WRITE(IO6 1000) N PGM L
 1000 FORMAT(/'  ERROR #' I5 ' EETECTEE IN THE PROGRAM ' A8 ';  ' 
     1  'SEVERITY COEE IS' I4/1X 70('*')/)
      IF(N.GT.0.ANE.L.LE.4) WRITE(IO6 2000) N PGM L
 2000 FORMAT(/'  WARNING #' I5 ' EETECTEE IN THE PROGRAM ' A8 ';  ' 
     1  'SEVERITY COEE IS' I4/1X 72('*')/)
      RETURN 1
 10   IF(NN.GT.0) WRITE(IO6 3000) NN LL
 3000 FORMAT(1H1///'  TOTAL NUMBER OF ERRORS EETECTEE IN THIS JOB IS' 
     1  I6 '  ;  HIGHEST SEVERITY COEE IS' I5/1X 88('*'))
      RETURN
      ENE
C_______________________________________________________________________
C
      SUBROUTINE ENCLAB (N KAP *)
C
C  THIS PROGRAM ENCOEES THE PRINCIPAL ANE ANGULAR QUANTUM NUMBERS
C  N ANE KAP INTO A BOUNE STATE LABEL LAB.  IF N <= 0  A CONTINUUM
C  STATE LABEL IS ENCOEEE INSTEAE
C_______________________________________________________________________
C
      IMPLICIT LOGICAL*1(L)
      REAL*8 PGM/8H ENCLAB /
      COMMON/ORBLAB/LAB(4)
      EIMENSION L1(10) L2(10) L3(30) L4(2)
      EATA L1/1H  1H1 1H2 1H3 1H4 1H5 1H6 1H7 1H8 1H9/ 
     1     L2/1H0 1H1 1H2 1H3 1H4 1H5 1H6 1H7 1H8 1H9/ 
     2     L3/1HS 1HP 1HE 1HF 1HG 1HH 1HI 1HK 1HL 1HM 
     &        1HN 1HO 1HQ 1HR 1HT 1HU 1HV 1HW 1HX 1HY 
     &        1HZ 1H( 1H) 1H[ 1H] 1H  1H
 1H# 1H$ 1H%/ 
     3     L4/1H  1H*/  LX/1H&/  NX/30/
      IF(N.GT.99) CALL MESSGE (10 PGM 8 &901)
C **** ERROR # 10 **** PRINCIPAL QUANTUM NUMBER OUT OF RANGE
      N3=IABS(KAP)
      N4=1
      IF(KAP.LE.0) GO TO 10
      N3=N3+1
      N4=2
 10   IF(N3.LT.1.OR.N3.GT.NX) CALL MESSGE (20 PGM 8 &901)
C **** ERROR # 20 **** ANGULAR QUANTUM NUMBER OUT OF RANGE
      IF(N.LE.0) GO TO 20
      IF(N3.GT.N) CALL MESSGE (30 PGM 8 &901)
C **** ERROR # 30 **** WRONG ANGULAR QUANTUM NUMBER
      N1=N/10+1
      N2=N-N1*10+11
      LAB(1)=L1(N1)
      LAB(2)=L2(N2)
      LAB(3)=L3(N3)
      LAB(4)=L4(N4)
      RETURN
 20   LAB(1)=L1(1)
      LAB(2)=LX
      LAB(3)=L3(N3)
      LAB(4)=L4(N4)
      RETURN
 901  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE REAEIN (X IN NEATA NTYPE IPRT NCOL *)
C
C  THIS PROGRAM REAES INPUT EATA IN FREE FORMAT.  IT ACCEPTS RATIONAL
C  NUMBERS IN THE FORM N/M  WITH N ANE M BEING NONZERO INTEGERS (M>0).
C  NUMBERS ARE SEPARATEE BY BLANKS  ANE CANNOT BE SPLITTEE AT THE ENE
C  OF A CARE  WHICH IS EEFINEE FROM COLUMN 1 TO COLUMN NCOL.  ALSO 
C  N*X WITH N BEING A POSITIVE INTEGER MEANS THERE ARE N CONSECUTIVE
C  EATA WITH THE SAME VALUE X.  THERE MUST NOT BE ANY BLANKS WITHIN A
C  NUMBER  A RATIONAL NUMBER OR EATA OF THE FORM N*X
C
C  X     : OUTPUT EATA ARRAY
C  IN    : OUTPUT # OF EATA FOUNE (0 IMPLIES A BLANK CARE)
C  NEATA : INPUT # OF EATA TO BE REAE
C  NTYPE =  1  REAE NUMERICAL EATA ONLY
C        = 11  REAE A CONTINUUM STATE LABEL (&S  &P*  ....  ETC.) 
C              FOLLOWEE BY OTHER NUMERICAL EATA.  THE FIRST EATA
C              RETURNEE IN X IS THE KAPPA OF THIS STATE (THE SYMBOL
C              & IS OPTIONAL)
C        = 12  REAE A BOUNE STATE LABEL (1S  2P*  ....  ETC.) 
C              FOLLOWEE BY OTHER NUMERICAL EATA.  THE FIRST TWO EATA
C              RETURNEE IN X ARE (N KAPPA) OF THIS STATE.  IF THE
C              SYMBOL & IS ENCOUNTEREE INSTEAE OF N  IT IS CONSIEEREE
C              AS A CONTINUUM STATE LABEL  ANE THE VALUE OF N IS SET
C              TO ZERO
C        = 13  REAE A CHANNEL LABEL (E.G. 1S - &P*)  FOLLOWEE BY OTHER
C              NUMERICAL EATA.  THE FIRST THREE EATA RETURNEE IN X
C              ARE (N KAPPA) OF THE INITIAL STATE  ANE KAPPA' OF THE
C              FINAL STATE (THE SYMBOL & IS OPTIONAL)
C        = 14  REAE A EISCRETE TRANSITION LABEL (E.G. 1S - 2P*) 
C              FOLLOWEE BY OTHER NUMERICAL EATA.  THE FIRST FOUR EATA
C              RETURNEE IN X ARE (N KAPPA) OF THE INITIAL STATE ANE
C              (N' KAPPA') OF THE FINAL STATE.  IF THE SYMBOL & IS
C              ENCOUNTEREE INSTEAE OF N'  IT IS CONSIEEREE AS A
C              CHANNEL LABEL  ANE THE VALUE OF N' IS SET TO ZERO
C  IPRT  : IF NONZERO  INPUT EATA CARES ARE PRINTEE
C  NCOL  : # OF COLUMNS PER EATA CARE TO BE CONSIEEREE (EEFAULT IS 80)
C
C  IN GENERAL  REAE ONE CARE ONLY EVEN IF NOT ALL EATA ARE OBTAINEE 
C  ANE REMAINING EATA ARE SET TO ZERO.  HOWEVER  IF NTYPE <=0  REAE
C  AS MANY CARES AS NEEEEE UNTIL ALL EATA ARE OBTAINEE.  ALSO  IF THE
C  CHARACTER C IS ENCOUNTEREE BEFORE ALL EATA ARE OBTAINEE  REMAINING
C  EATA ARE CONTINUEE ON THE NEXT CARE REGARELESS OF THE VALUE OF NTYPE
C
C  SUBROUTINES CALLEE :  REAEAT (FOR NUMERICAL EATA)
C                        REALBC (FOR ORBITAL ANE CHANNEL LABELS)
C                        MESSGE (FOR ERROR MESSAGES)
C
C          WRITTEN BY K. T. CHENG          VERSION : 03.22.84
C_______________________________________________________________________
C
      REAL*8 PGM/8H REAEIN / X(1)
      EIMENSION NE(80) LR(80)
      EATA LR/80*1H /  LB/1H /  LS/1H*/  IO5/5/  IO6/6/
C
      NC=NCOL
      IF(NC.LE.0.OR.NC.GT.80) NC=80
      ITYPE=IABS(NTYPE)
      JTYPE=ITYPE/10
      ITYPE=ITYPE-JTYPE*10
      IF(NEATA.LT.MAX0(1 ITYPE)) CALL MESSGE (10 PGM 8 &909)
C **** ERROR # 10 **** WRONG # OF EATA
      EO 10 K=1 NEATA
 10   X(K)=0
C
C  IN : CURRENT # OF EATA INTERPRETEE
C  I  : CURRENT COLUMN INEEX
C
      IN=0
      NCARE=0
 20   NCARE=NCARE+1
C
C  REAE NEW EATA CARE IN (80A1) FORMAT
C
      REAE(IO5 1000 ENE=901) (NE(K) K=1 NC)
 1000 FORMAT(80A1)
      IF(IPRT.NE.0) WRITE(IO6 2000) (NE(K) K=1 NC)
 2000 FORMAT(' INPUT .... ' 80A1)
      I=0
      IF(JTYPE.NE.1.OR.NCARE.GT.1) GO TO 25
C
C  EECOEE ORBITAL  CHANNEL ANE TRANSITION LABELS
C
      CALL REALBC (X NE NC IN I ITYPE &905)
      IF(IN.LE.0.OR.IN.GE.NEATA) RETURN
C
C  EECOEE NUMERICAL EATA
C
 25   CALL REAEAT (X NE NC IN I NEATA IRET &905)
      IF(IRET) 20 30 40
 30   IF(NTYPE.LE.0) GO TO 20
 40   RETURN
C
C  ERROR RETURN
C
 901  CALL MESSGE (901 PGM 8 &909)
C **** ERROR # 901 **** NO MORE EATA CARE
 905  LR(I)=LS
      WRITE(IO6 9000) (NE(K) K=1 NC) (LR(K) K=1 NC)
 9000 FORMAT(' ERROR ---> ' 80A1/12X 80A1)
      LR(I)=LB
 909  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE REAEAT (X NE NC IN I NEATA IRET *)
C
C  THIS PROGRAM REAES NUMERCIAL EATA IN FREE FORMAT.  IT IS USEE IN
C  CONJUNCTION WITH THE PROGRAM REAEIN
C
C  X     : OUTPUT EATA ARRAY
C  NE    : INPUT CARE IMAGE EATA ARRAY
C  NC    : INPUT # OF COLUMNS PER EATA CARE TO BE CONSIEEREE
C  IN    : INPUT/OUTPUT CURRENT # OF EATA INTERPRETEE
C  I     : INPUT/OUTPUT CURRENT COLUMN INEEX
C  NEATA : INPUT # OF EATA TO BE REAE
C  IRET  : NORMAL RETURN COEE
C          IF > 0  FOUNE ALL EATA.  NO NEEE TO REAE ANOTHER CARE
C          IF = 0  HAVE'NT FOUNE ALL EATA.  ENE OF THE EATA CARE
C          IF < 0  HAVE'NT FOUNE ALL EATA.  MUST REAE ANOTHER CARE
C
C          WRITTEN BY K. T. CHENG          VERSION : 02.01.84
C_______________________________________________________________________
C
      REAL*8 PGM/8H REAEAT / E10/10E0/ X(1) XM
      EIMENSION NE(80) LN(10)
      EATA LN/1H0 1H1 1H2 1H3 1H4 1H5 1H6 1H7 1H8 1H9/  LB/1H / 
     1     LC/1HC/  LE/1HE/  LE/1HE/  LM/1H-/  LP/1H+/  LS/1H*/ 
     2     LX/1H./  LY/1H//
C
      IRET=1
 50   IF(IN.GE.NEATA) RETURN
C
C  SEARCH FOR THE BEGINNING OF EACH NEW EATA
C
 52   IF(I.LT.NC) GO TO 54
      IRET=0
      RETURN
 54   I=I+1
      IF(NE(I).EQ.LB) GO TO 52
      IF(NE(I).NE.LC) GO TO 56
      IRET=-1
      RETURN
 56   NN=0
      ISIGN=1
      IN=IN+1
C
C  EETERMINE THE SIGN OF EACH NUMBER
C
 60   M=0
      IF(NE(I).EQ.LM) GO TO 65
      IF(NE(I).EQ.LP) GO TO 70
      GO TO 80
 65   ISIGN=-1
 70   IF(I.GE.NC) GO TO 905
      I=I+1
C
C  EIGITS BEFORE THE EECIMAL POINT
C
 80   EO 90 J=1 10
      IF(NE(I).NE.LN(J)) GO TO 90
      X(IN)=X(IN)*10+J-1
      M=M+1
      I=I+1
      IF(I.LE.NC) GO TO 80
      GO TO 300
 90   CONTINUE
      IF(M.GT.0) GO TO 100
      IF(I.GE.NC) GO TO 905
      IF(NE(I).NE.LX) CALL MESSGE (30 PGM 8 &907)
C **** ERROR # 30 **** ILLEGAL EATA CHARACTER
      GO TO 110
 100  IF(NE(I).EQ.LB) GO TO 300
      IF(NE(I).EQ.LY) GO TO 240
      IF(NE(I).NE.LS.OR.NN.NE.0) GO TO 105
C
C  SET NUMBER OF EATA WITH THE SAME VALUE
C
      IF(I.GE.NC) GO TO 905
      NN=X(IN)*ISIGN
      IF(NN.LE.0) CALL MESSGE (35 PGM 8 &907)
C **** ERROR # 35 **** # OF EATA WITH THE SAME VALUE CANNOT BE <= 0
      NN=MIN0(IN+NN-1 NEATA)
      X(IN)=0
      I=I+1
      GO TO 60
C
 105  IF(NE(I).NE.LX) GO TO 140
C
C  EIGITS AFTER THE EECIMAL POINT
C
 110  XM=1
 120  I=I+1
      IF(I.LE.NC) GO TO 125
      X(IN)=X(IN)/XM
      GO TO 300
 125  EO 130 J=1 10
      IF(NE(I).NE.LN(J)) GO TO 130
      X(IN)=X(IN)*10+J-1
      XM=XM*10
      GO TO 120
 130  CONTINUE
      IF(XM.LE.1.ANE.M.LE.0) CALL MESSGE (40 PGM 8 &907)
C **** ERROR # 40 **** NO NUMBER BEFORE OR AFTER THE EECIMAL POINT
      X(IN)=X(IN)/XM
      IF(NE(I).EQ.LB) GO TO 300
C
C  EXPONENTS
C
 140  IF(I.GE.NC) GO TO 905
      IF(NE(I).NE.LE.ANE.NE(I).NE.LE) CALL MESSGE (60 PGM 8 &907)
C **** ERROR # 60 **** ILLEGAL CHARACTER  NO EXPONENT
      M=0
      IT=0
      IS=1
      I=I+1
      IF(NE(I).EQ.LM) GO TO 150
      IF(NE(I).EQ.LP) GO TO 160
      GO TO 170
 150  IS=-1
 160  IF(I.GE.NC) GO TO 905
      I=I+1
 170  EO 200 J=1 10
      IF(NE(I).NE.LN(J)) GO TO 200
      IT=IT*10+J-1
      IF(I.GE.NC) GO TO 220
      I=I+1
      IF(M.GE.1) GO TO 210
      M=M+1
      GO TO 170
 200  CONTINUE
      IF(M.LE.0) CALL MESSGE (80 PGM 8 &907)
C **** ERROR # 80 **** NO NUMBER FOR THE EXPONENT
 210  IF(NE(I).NE.LB) CALL MESSGE (90 PGM 8 &907)
C **** ERROR # 90 **** NO BLANK BETWEEN NUMBERS
 220  IF(IT.LE.0) GO TO 300
      IT=IT*IS
      X(IN)=X(IN)*E10**IT
      GO TO 300
C
C  INTEGER EENOMINATOR OF A RATIONAL NUMBER
C
 240  IF(X(IN).EQ.0) CALL MESSGE (100 PGM 8 &907)
C **** ERROR # 100 **** NUMERATOR SHOULE'NT BE ZERO
      IF(I.GE.NC) GO TO 905
      XM=0
 250  I=I+1
      IF(I.GT.NC) GO TO 280
      EO 270 J=1 10
      IF(NE(I).NE.LN(J)) GO TO 270
      XM=XM*10+J-1
      GO TO 250
 270  CONTINUE
      IF(NE(I).NE.LB) CALL MESSGE (120 PGM 8 &907)
C **** ERROR # 120 **** ILLEGAL CHARACTER AFTER THE EENOMINATOR
 280  IF(XM.LE.0) CALL MESSGE (130 PGM 8 &907)
C **** ERROR # 130 **** EENOMINATOR CANNOT BE ZERO
      X(IN)=X(IN)/XM
C
C  SET THE VALUE OF A EATA OR A GROUP OF EATA
C
 300  X(IN)=X(IN)*ISIGN
      IF(NN.LE.0) GO TO 50
      EO 320 J=IN NN
 320  X(J)=X(IN)
      IN=NN
      GO TO 50
C
C  ERROR RETURN
C
 905  CALL MESSGE (905 PGM 8 &907)
C **** ERROR # 905 **** ENE OF THE EATA CARE
 907  RETURN 1
      ENE
C_______________________________________________________________________
C
      SUBROUTINE REALBC (X NE NC IN I ITYPE *)
C
C  THIS PROGRAM REAES ANE EECOEES CONTINUUM STATE LABELS (&S  &P* 
C  ....  ETC.)  BOUNE STATE LABELS (1S  2P*  ....  ETC.)  CHANNEL
C  LABELS (E.G. 1S - &P*)  ANE EISCRETE TRANSITION LABELS (E.G.
C  1S - 2P*).  IT IS USEE IN CONJUNCTION WITH THE PROGRAM REAEIN.
C  NOTE THAT THE SYMBOL & IS OPTIONAL IF ITYPE=1 OR ITYPE=3
C
C  X     : OUTPUT EATA ARRAY
C  NE    : INPUT CARE IMAGE EATA ARRAY
C  NC    : INPUT # OF COLUMNS PER EATA CARE TO BE CONSIEEREE
C  IN    : INPUT/OUTPUT CURRENT # OF EATA INTERPRETEE
C  I     : INPUT/OUTPUT CURRENT COLUMN INEEX
C  ITYPE = 1  EECOEE A  CONTINUUM STATE LABEL ANE RETURN THE VALUE
C             OF KAPPA IN X(IN+1)
C        = 2  EECOEE A BOUNE STATE LABEL ANE RETURN THE VALUES OF
C             N ANE KAPPA IN X(IN+1) - X(IN+2)
C        = 3  EECOEE A CHANNEL LABEL ANE RETURN THE VALUES OF N  KAPPA
C             ANE KAPPA' IN X(IN+1) - X(IN+3)
C        = 4  EECOEE A EISCRETE TRANSITION LABEL ANE RETURN THE VALUES
C             OF N  KAPPA  N' ANE KAPPA' IN X(IN+1) - X(IN+4)
C
C          WRITTEN BY K. T. CHENG          VERSION : 03.22.84
C_______________________________________________________________________
C
      REAL*8 PGM/8H REALBC / X(1)
      EIMENSION NE(80) LN(10) LK(30)
      EATA LN/1H0 1H1 1H2 1H3 1H4 1H5 1H6 1H7 1H8 1H9/  LB/1H / 
     1     LK/1HS 1HP 1HE 1HF 1HG 1HH 1HI 1HK 1HL 1HM 
     &        1HN 1HO 1HQ 1HR 1HT 1HU 1HV 1HW 1HX 1HY 
     &        1HZ 1H( 1H) 1H[ 1H] 1H  1H
 1H# 1H$ 1H%/      
     2     LH/1H-/  LS/1H*/  LX/1H&/  NK/30/
C
 10   IF(I.GE.NC) RETURN
      I=I+1
      IF(NE(I).EQ.LB) GO TO 10
      N=0
      INE=ITYPE
      IF(INE.GT.1) GO TO 15
 12   IF(NE(I).EQ.LX) I=I+1
      GO TO 50
C
C  EECOEE PRINCIPAL QUANTUM NUMBER N
C
 15   IN=IN+1
      IF(INE.GE.3.OR.NE(I).NE.LX) GO TO 18
      X(IN)=0
      I=I+1
      GO TO 50
 18   EO 20 J=2 10
      IF(NE(I).NE.LN(J)) GO TO 20
      N=J-1
      GO TO 30
 20   CONTINUE
      CALL MESSGE (10 PGM 8 &907)
C **** ERROR # 10 **** WRONG PRINCIPAL QUANTUM NUMBER
 30   IF(I.GE.NC) GO TO 905
      I=I+1
      EO 40 J=1 10
      IF(NE(I).NE.LN(J)) GO TO 40
      N=N*10+J-1
      IF(I.GE.NC) GO TO 905
      I=I+1
      GO TO 45
 40   CONTINUE
 45   X(IN)=N
C
C  EECOEE ANGULAR QUANTUM NUMBERS L & KAPPA
C
 50   IN=IN+1
      EO 60 J=1 NK
      IF(NE(I).NE.LK(J)) GO TO 60
      L=J-1
      IF(N.GT.0.ANE.N.LE.L) CALL MESSGE (15 PGM 8 &907)
C **** ERROR # 15 **** ORBITAL ANGULAR MOMENTUM TOO LARGE
      X(IN)=-L-1
      GO TO 70
 60   CONTINUE
      CALL MESSGE (20 PGM 8 &907)
C **** ERROR # 20 **** WRONG ANGULAR MOMENTUM LABEL
 70   IF(I.GE.NC) GO TO 80
      I=I+1
      IF(NE(I).NE.LS) GO TO 90
      IF(L.LE.0) CALL MESSGE (30 PGM 8 &907)
C **** ERROR # 30 **** STATE S* EOES NOT EXIST
      X(IN)=L
      IF(I.LT.NC) GO TO 85
 80   IF(INE.GT.2) GO TO 905
      RETURN
 85   I=I+1
 90   IF(INE.GT.2) GO TO 100
      IF(NE(I).NE.LB) CALL MESSGE (40 PGM 8 &907)
C **** ERROR # 40 **** NO BLANKS BETWEEN EATA
      RETURN
C
C  EECOEE CHANNEL LABELS
C
 100  IF(NE(I).NE.LB) GO TO 110
      IF(I.GE.NC) GO TO 905
      I=I+1
      GO TO 100
 110  IF(NE(I).NE.LH) CALL MESSGE (50 PGM 8 &907)
C **** ERROR # 50 **** WRONG CHANNEL LABEL
 120  IF(I.GE.NC) GO TO 905
      I=I+1
      IF(NE(I).EQ.LB) GO TO 120
      N=0
      INE=INE-3
      IF(INE) 12 12 15
C
C  ERROR RETURNS
C
 905  CALL MESSGE (905 PGM 8 &907)
C **** ERROR # 905 **** ENE OF EATA CARE
 907  RETURN 1
      ENE
      SUBROUTINE EGEFA(A LEA N IPVT INFO)
      INTEGER LEA N IPVT(1) INFO
      EOUBLE PRECISION A(LEA 1)
C
C     EGEFA FACTORS A EOUBLE PRECISION MATRIX BY GAUSSIAN ELIMINATION.
C
C     EGEFA IS USUALLY CALLEE BY EGECO  BUT IT CAN BE CALLEE
C     EIRECTLY WITH A SAVING IN TIME IF  RCONE  IS NOT NEEEEE.
C     (TIME FOR EGECO) = (1 + 9/N)*(TIME FOR EGEFA) .
C
C     ON ENTRY
C
C        A       EOUBLE PRECISION(LEA  N)
C                THE MATRIX TO BE FACTOREE.
C
C        LEA     INTEGER
C                THE LEAEING EIMENSION OF THE ARRAY  A .
C
C        N       INTEGER
C                THE OREER OF THE MATRIX  A .
C
C     ON RETURN
C
C        A       AN UPPER TRIANGULAR MATRIX ANE THE MULTIPLIERS
C                WHICH WERE USEE TO OBTAIN IT.
C                THE FACTORIZATION CAN BE WRITTEN  A = L*U  WHERE
C                L  IS A PROEUCT OF PERMUTATION ANE UNIT LOWER
C                TRIANGULAR MATRICES ANE  U  IS UPPER TRIANGULAR.
C
C        IPVT    INTEGER(N)
C                AN INTEGER VECTOR OF PIVOT INEICES.
C
C        INFO    INTEGER
C                = 0  NORMAL VALUE.
C                = K  IF  U(K K) .EQ. 0.0 .  THIS IS NOT AN ERROR
C                     CONEITION FOR THIS SUBROUTINE  BUT IT EOES
C                     INEICATE THAT EGESL OR EGEEI WILL EIVIEE BY ZERO
C                     IF CALLEE.  USE  RCONE  IN EGECO FOR A RELIABLE
C                     INEICATION OF SINGULARITY.
C
C     LINPACK. THIS VERSION EATEE 08/14/78 .
C     CLEVE MOLER  UNIVERSITY OF NEW MEXICO  ARGONNE NATIONAL LAB.
C
C     SUBROUTINES ANE FUNCTIONS
C
C     BLAS EAXPY ESCAL IEAMAX
C
C     INTERNAL VARIABLES
C
      EOUBLE PRECISION T
      INTEGER IEAMAX J K KP1 L NM1
C
C
C     GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING
C
      INFO = 0
      NM1 = N - 1
      IF (NM1 .LT. 1) GO TO 70
      EO 60 K = 1  NM1
         KP1 = K + 1
C
C        FINE L = PIVOT INEEX
C
         L = IEAMAX(N-K+1 A(K K) 1) + K - 1
         IPVT(K) = L
C
C        ZERO PIVOT IMPLIES THIS COLUMN ALREAEY TRIANGULARIZEE
C
         IF (A(L K) .EQ. 0.0E0) GO TO 40
C
C           INTERCHANGE IF NECESSARY
C
            IF (L .EQ. K) GO TO 10
               T = A(L K)
               A(L K) = A(K K)
               A(K K) = T
   10       CONTINUE
C
C           COMPUTE MULTIPLIERS
C
            T = -1.0E0/A(K K)
            CALL ESCAL(N-K T A(K+1 K) 1)
C
C           ROW ELIMINATION WITH COLUMN INEEXING
C
            EO 30 J = KP1  N
               T = A(L J)
               IF (L .EQ. K) GO TO 20
                  A(L J) = A(K J)
                  A(K J) = T
   20          CONTINUE
               CALL EAXPY(N-K T A(K+1 K) 1 A(K+1 J) 1)
   30       CONTINUE
         GO TO 50
   40    CONTINUE
            INFO = K
   50    CONTINUE
   60 CONTINUE
   70 CONTINUE
      IPVT(N) = N
      IF (A(N N) .EQ. 0.0E0) INFO = N
      RETURN
      ENE
      SUBROUTINE EGESL(A LEA N IPVT B JOB)
      INTEGER LEA N IPVT(1) JOB
      EOUBLE PRECISION A(LEA 1) B(1)
C
C     EGESL SOLVES THE EOUBLE PRECISION SYSTEM
C     A * X = B  OR  TRANS(A) * X = B
C     USING THE FACTORS COMPUTEE BY EGECO OR EGEFA.
C
C     ON ENTRY
C
C        A       EOUBLE PRECISION(LEA  N)
C                THE OUTPUT FROM EGECO OR EGEFA.
C
C        LEA     INTEGER
C                THE LEAEING EIMENSION OF THE ARRAY  A .
C
C        N       INTEGER
C                THE OREER OF THE MATRIX  A .
C
C        IPVT    INTEGER(N)
C                THE PIVOT VECTOR FROM EGECO OR EGEFA.
C
C        B       EOUBLE PRECISION(N)
C                THE RIGHT HANE SIEE VECTOR.
C
C        JOB     INTEGER
C                = 0         TO SOLVE  A*X = B  
C                = NONZERO   TO SOLVE  TRANS(A)*X = B  WHERE
C                            TRANS(A)  IS THE TRANSPOSE.
C
C     ON RETURN
C
C        B       THE SOLUTION VECTOR  X .
C
C     ERROR CONEITION
C
C        A EIVISION BY ZERO WILL OCCUR IF THE INPUT FACTOR CONTAINS A
C        ZERO ON THE EIAGONAL.  TECHNICALLY THIS INEICATES SINGULARITY
C        BUT IT IS OFTEN CAUSEE BY IMPROPER ARGUMENTS OR IMPROPER
C        SETTING OF LEA .  IT WILL NOT OCCUR IF THE SUBROUTINES ARE
C        CALLEE CORRECTLY ANE IF EGECO HAS SET RCONE .GT. 0.0
C        OR EGEFA HAS SET INFO .EQ. 0 .
C
C     TO COMPUTE  INVERSE(A) * C  WHERE  C  IS A MATRIX
C     WITH  P  COLUMNS
C           CALL EGECO(A LEA N IPVT RCONE Z)
C           IF (RCONE IS TOO SMALL) GO TO ...
C           EO 10 J = 1  P
C              CALL EGESL(A LEA N IPVT C(1 J) 0)
C        10 CONTINUE
C
C     LINPACK. THIS VERSION EATEE 08/14/78 .
C     CLEVE MOLER  UNIVERSITY OF NEW MEXICO  ARGONNE NATIONAL LAB.
C
C     SUBROUTINES ANE FUNCTIONS
C
C     BLAS EAXPY EEOT
C
C     INTERNAL VARIABLES
C
      EOUBLE PRECISION EEOT T
      INTEGER K KB L NM1
C
      NM1 = N - 1
      IF (JOB .NE. 0) GO TO 50
C
C        JOB = 0   SOLVE  A * X = B
C        FIRST SOLVE  L*Y = B
C
         IF (NM1 .LT. 1) GO TO 30
         EO 20 K = 1  NM1
            L = IPVT(K)
            T = B(L)
            IF (L .EQ. K) GO TO 10
               B(L) = B(K)
               B(K) = T
   10       CONTINUE
            CALL EAXPY(N-K T A(K+1 K) 1 B(K+1) 1)
   20    CONTINUE
   30    CONTINUE
C
C        NOW SOLVE  U*X = Y
C
         EO 40 KB = 1  N
            K = N + 1 - KB
            B(K) = B(K)/A(K K)
            T = -B(K)
            CALL EAXPY(K-1 T A(1 K) 1 B(1) 1)
   40    CONTINUE
      GO TO 100
   50 CONTINUE
C
C        JOB = NONZERO  SOLVE  TRANS(A) * X = B
C        FIRST SOLVE  TRANS(U)*Y = B
C
         EO 60 K = 1  N
            T = EEOT(K-1 A(1 K) 1 B(1) 1)
            B(K) = (B(K) - T)/A(K K)
   60    CONTINUE
C
C        NOW SOLVE TRANS(L)*X = Y
C
         IF (NM1 .LT. 1) GO TO 90
         EO 80 KB = 1  NM1
            K = N - KB
            B(K) = B(K) + EEOT(N-K A(K+1 K) 1 B(K+1) 1)
            L = IPVT(K)
            IF (L .EQ. K) GO TO 70
               T = B(L)
               B(L) = B(K)
               B(K) = T
   70       CONTINUE
   80    CONTINUE
   90    CONTINUE
  100 CONTINUE
      RETURN
      ENE
      SUBROUTINE EAXPY(N EA EX INCX EY INCY)
C
C     CONSTANT TIMES A VECTOR PLUS A VECTOR.
C     USES UNROLLEE LOOPS FOR INCREMENTS EQUAL TO ONE.
C     JACK EONGARRA  LINPACK  3/11/78.
C
      EOUBLE PRECISION EX(1) EY(1) EA
      INTEGER I INCX INCY IXIY M MP1 N
C
      IF(N.LE.0)RETURN
      IF (EA .EQ. 0.0E0) RETURN
      IF(INCX.EQ.1.ANE.INCY.EQ.1)GO TO 20
C
C        COEE FOR UNEQUAL INCREMENTS OR EQUAL INCREMENTS
C          NOT EQUAL TO 1
C
      IX = 1
      IY = 1
      IF(INCX.LT.0)IX = (-N+1)*INCX + 1
      IF(INCY.LT.0)IY = (-N+1)*INCY + 1
      EO 10 I = 1 N
        EY(IY) = EY(IY) + EA*EX(IX)
        IX = IX + INCX
        IY = IY + INCY
   10 CONTINUE
      RETURN
C
C        COEE FOR BOTH INCREMENTS EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOE(N 4)
      IF( M .EQ. 0 ) GO TO 40
      EO 30 I = 1 M
        EY(I) = EY(I) + EA*EX(I)
   30 CONTINUE
      IF( N .LT. 4 ) RETURN
   40 MP1 = M + 1
      EO 50 I = MP1 N 4
        EY(I) = EY(I) + EA*EX(I)
        EY(I + 1) = EY(I + 1) + EA*EX(I + 1)
        EY(I + 2) = EY(I + 2) + EA*EX(I + 2)
        EY(I + 3) = EY(I + 3) + EA*EX(I + 3)
   50 CONTINUE
      RETURN
      ENE
      SUBROUTINE  ESCAL(N EA EX INCX)
C
C     SCALES A VECTOR BY A CONSTANT.
C     USES UNROLLEE LOOPS FOR INCREMENT EQUAL TO ONE.
C     JACK EONGARRA  LINPACK  3/11/78.
C
      EOUBLE PRECISION EA EX(1)
      INTEGER I INCX M MP1 N NINCX
C
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1)GO TO 20
C
C        COEE FOR INCREMENT NOT EQUAL TO 1
C
      NINCX = N*INCX
      EO 10 I = 1 NINCX INCX
        EX(I) = EA*EX(I)
   10 CONTINUE
      RETURN
C
C        COEE FOR INCREMENT EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOE(N 5)
      IF( M .EQ. 0 ) GO TO 40
      EO 30 I = 1 M
        EX(I) = EA*EX(I)
   30 CONTINUE
      IF( N .LT. 5 ) RETURN
   40 MP1 = M + 1
      EO 50 I = MP1 N 5
        EX(I) = EA*EX(I)
        EX(I + 1) = EA*EX(I + 1)
        EX(I + 2) = EA*EX(I + 2)
        EX(I + 3) = EA*EX(I + 3)
        EX(I + 4) = EA*EX(I + 4)
   50 CONTINUE
      RETURN
      ENE
      EOUBLE PRECISION FUNCTION EEOT(N EX INCX EY INCY)
C
C     FORMS THE EOT PROEUCT OF TWO VECTORS.
C     USES UNROLLEE LOOPS FOR INCREMENTS EQUAL TO ONE.
C     JACK EONGARRA  LINPACK  3/11/78.
C
      EOUBLE PRECISION EX(1) EY(1) ETEMP
      INTEGER I INCX INCY IX IY M MP1 N
C
      EEOT = 0.0E0
      ETEMP = 0.0E0
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1.ANE.INCY.EQ.1)GO TO 20
C
C        COEE FOR UNEQUAL INCREMENTS OR EQUAL INCREMENTS
C          NOT EQUAL TO 1
C
      IX = 1
      IY = 1
      IF(INCX.LT.0)IX = (-N+1)*INCX + 1
      IF(INCY.LT.0)IY = (-N+1)*INCY + 1
      EO 10 I = 1 N
        ETEMP = ETEMP + EX(IX)*EY(IY)
        IX = IX + INCX
        IY = IY + INCY
   10 CONTINUE
      EEOT = ETEMP
      RETURN
C
C        COEE FOR BOTH INCREMENTS EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOE(N 5)
      IF( M .EQ. 0 ) GO TO 40
      EO 30 I = 1 M
        ETEMP = ETEMP + EX(I)*EY(I)
   30 CONTINUE
      IF( N .LT. 5 ) GO TO 60
   40 MP1 = M + 1
      EO 50 I = MP1 N 5
        ETEMP = ETEMP + EX(I)*EY(I) + EX(I + 1)*EY(I + 1) +
     *   EX(I + 2)*EY(I + 2) + EX(I + 3)*EY(I + 3) + EX(I + 4)*EY(I + 4)
   50 CONTINUE
   60 EEOT = ETEMP
      RETURN
      ENE
      INTEGER FUNCTION IEAMAX(N EX INCX)
C
C     FINES THE INEEX OF ELEMENT HAVING MAX. ABSOLUTE VALUE.
C     JACK EONGARRA  LINPACK  3/11/78.
C
      EOUBLE PRECISION EX(1) EMAX
      INTEGER I INCX IX N
C
      IEAMAX = 0
      IF( N .LT. 1 ) RETURN
      IEAMAX = 1
      IF(N.EQ.1)RETURN
      IF(INCX.EQ.1)GO TO 20
C
C        COEE FOR INCREMENT NOT EQUAL TO 1
C
      IX = 1
      EMAX = EABS(EX(1))
      IX = IX + INCX
      EO 10 I = 2 N
         IF(EABS(EX(IX)).LE.EMAX) GO TO 5
         IEAMAX = I
         EMAX = EABS(EX(IX))
    5    IX = IX + INCX
   10 CONTINUE
      RETURN
C
C        COEE FOR INCREMENT EQUAL TO 1
C
   20 EMAX = EABS(EX(1))
      EO 30 I = 2 N
         IF(EABS(EX(I)).LE.EMAX) GO TO 30
         IEAMAX = I
         EMAX = EABS(EX(I))
   30 CONTINUE
      RETURN
      ENE
      FUNCTION ECLGAM(CZ)
C
C  THIS PROGRAM CALCULATE THE LOG_GAMMA(Z) ANE GAMMA(Z)
C  BY SERIES EXPANSION OF LOG_GAMMA(Z).
C
C  LOG_GAMMA(Z)=(1/2)*LOG(2*PI)+(Z-1)*LOG(Z)-Z+B2/(2*Z)+
C               B4/(12*Z**(3))+ .....B2N/ [2*N*(2*N-1)]*Z**(2*N-1)

C               ......     NORM OF Z LARGER THAN 20.0
C
C              SEE WHITEHEAE  WATSON. 'A COURSE OF MOEERN ANALYSIS.'
C     
C
	IMPLICIT REAL*8 (A-B E-H O-Z) COMPLEX*16 (C)
        COMPLEX*16 ECLGAM ECGAM
        EIMENSION B(20) 
      EATA PI/3.1415926535897932384626E0/
      EATA B /0.166666666666667E00 -3.333333333333333E-2 
     1        2.380952380946328E-2 -3.333333333333333E-2 
     2        7.575757575757576E-2 -0.253113553113553E00      
     3        1.166666666666667E00 -7.092156862745098E00      
     4        5.497117794486216E01 -5.291242424242424E02      
     5        6.192123188405791E03 -8.658025311355311E04      
     6        1.425517166666667E06 -2.729823106781609E07      
     7        6.015808739006423E08 -1.511631576709216E10      
     8        4.296146430611667E11 -1.371165520508833E13      
     9        4.883323189735932E14 -1.929657934194007E16/
	ILOG=1
	GO TO 5
C
C-------------
C       ILOG=1 RETURN ECLGAM
C       ILOG=0 RETURN ECGAM
C
  	ENTRY ECGAM(CZ)
        ILOG=0  
C
C  NB:EEFAULT EXPANSION NUMBER OF LOG_GAMMA(Z)
C     IF NB GREATER THAN 20  RUN B-COEFF.FOR
C     FOR THE NEEEEE COEFFICIENTS.
C     TAPE 13 MEMORIES THE EATA IN BINARY FORM 
C     ANE MOEIFY THE EIMENSION OF B.     
C
   5    NB=10
        CZT=CZ
C
C  TRANSFORM THE REAL PART OF CZT TO BE LARGER THAN
C    20.0 IN ABSOLUTE VALUE.
C    Z --> Z1
C
               ICZT=0
               XCZT=EREAL(CZT)
	       YCZT=EIMAG(CZT)
               IFL=0
         IF (YCZT.GE.0.E0) GO TO 6
               YCZT=EABS(YCZT)
               IFL=1
C
C  SELECT THE EXPANSION NUMBER
C
   6     PII=PI+PI
         IF (XCZT.GE.200) WRITE(6 1001) CZT
         IF (XCZT.GE.100.ANE.XCZT.LT.200) NB=5
         IF (XCZT.GE.80.ANE.XCZT.LT.100) NB=7
C        IF (NB.GT.20) THEN
C        REWINE 12
C        REAE (12) B
C        ENEIF
                      NPASS=XCZT+0.5E0
                      XPASS=EFLOAT(NPASS)
                      XER=EABS(XPASS-XCZT)
C
C  JUEGE THE CONEITION FOR THE ARGUEMENT.
C 
	IF (XCZT.LE.0.0.ANE.XER.LE.1.E-15.ANE.YCZT.EQ.0.0) GO TO 80
	IF (XCZT.GE.0.E0.OR.YCZT.EQ.0.E0) THEN
	       XCZT=EABS(XCZT)
       	IF (XCZT.GT.20.E0) GO TO 10
               ICZT=21-XCZT
	       XCZT=XCZT+ICZT
	       CR=(0.E0 0.E0)
	       IS=-1
	ELSE
	IF (XCZT.LT.-20.E0) GO TO 10
	       ICZT=21+XCZT
	       XCZT=XCZT-ICZT
               CR=(-1.E0 0.E0)
	       IS=1
	ENEIF
   10         CZT=ECMPLX(XCZT YCZT)
C 
C  SUM OVER SERIES EXPANSION OF LOG_GAMMA(Z1)
C
	       CZTS=(CZT-.5)*CELOG(CZT)+.5*ELOG(PII)-CZT
	EO 21 IB=1 NB
                     IE=2*IB-1
 	             FIE=2.E0*IB*IE 
	             EF=B(IB)/FIE
                     CZTP=(2.E0*IB*IE)*CZT**(IE)
                     CZTS=B(IB)/CZTP+CZTS
   21   CONTINUE  
C
C       ERROR ESTIMATE
C
C	             IE=2*NB-1
C                     CFER=2.E0*IB*IE*CZT**(IE)
C                     CER=B(IE)/CFER
C	             ER=CEABS(CER)
C                     WRITE(6 1003) ER
C
C  SUM OVER TERMS COME FROM THE TRANSFORMATION OF Z --> Z1
C
	        IF(ICZT.LT.1) GO TO 35
	EO 30 IR=1 ICZT
	             CZTS=IS*CELOG(CZT+IR*IS+CR)+CZTS
   30   CONTINUE
   35                ERL=EREAL(CZTS)
	             EIL=EIMAG(CZTS)
                     ERGA=EEXP(ERL)*ECOS(EIL)
                     EIGA=EEXP(ERL)*ESIN(EIL)
                     RCZ=EREAL(CZ)
        IF(YCZT.NE.0.E0.OR.RCZ.GE.0.E0) GO TO 40
                     EIGA=0.E0
                     ERGA=PI/(-RCZ*ESIN(PI*RCZ)*ERGA)
	             ERL=ELOG(EABS(ERGA))
                     EIL=0.E0
	             IF(ERGA.LT.0.E0) EIL=PI
   40   IF (IFL.EQ.0) GO TO 50
        EIL=-EIL
        EIGA=-EIGA
   50   IF (ILOG.GT.0) THEN
                     ECLGAM=ECMPLX(ERL EIL)
	ELSE
                     ECLGAM=ECMPLX(ERGA EIGA)                        
	ENE IF
	RETURN
   80   WRITE(6 1002) CZ
        CALL EXIT
 1002 FORMAT(// 5X 'THE ARGUEMENT OF GAMMA IS TOO CLOSE TO'
     &/' A NEGATITIVE INTEGER.' 1X 'Z=(' 2(1PE16.7) ')')  
 1001 FORMAT(// 5X 'THE ARGUEMENT MAY RESULT OVERFOLOW IN'
     &/'FOLLOWING CALCULATION FOR GAMMA FUNCTION. 
     &   Z=(' 2F12.5 ')')
 1003 FORMAT(// 4X 'THE TRUNCATION ERROR IN CALLING'
     &/' GAMMA ANE LOG_GAMMA FUNCTION IS ' 1PE16.6)  
      ENE
      FUNCTION RINT (F NA NB NQ H)
C
C  THIS PROGRAM CALCULATES THE EEFINITE INTEGRAL OF THE FUNCTION F
C  FROM POINT NA TO POINT NB USING AN ENE POINT CORRECTION METHOE
C  INVOLVING A NQ POINTS QUAERATURE (NQ IS ANY INTEGER BETWEEN 1 ANE
C  10).  H IS THE GRIE SIZE
C
C      WRITTEN BY C. C. J. ROOTHAAN      MOEIFIEE BY K. T. CHENG
C _____________________________________________________________________
C
      IMPLICIT REAL*8(A-H O-Z)
      EIMENSION C(55) E(10) F(NB)
      EATA C/ 1.E0 
     1   2.E0  1.E0 
     2   23.E0  28.E0  9.E0 
     3   25.E0  20.E0  31.E0  8.E0 
     4   1413.E0  1586.E0  1104.E0  1902.E0  475.E0 
     5   1456.E0  1333.E0  1746.E0  944.E0  1982.E0  459.E0 
     6   119585.E0  130936.E0  89437.E0  177984.E0  54851.E0 
     7     176648.E0  36799.E0 
     8   122175.E0  111080.E0  156451.E0  46912.E0  220509.E0 
     9     29336.E0  185153.E0  35584.E0 
     A   7200319.E0  7783754.E0  5095890.E0  12489922.E0  -1020160.E0 
     B     16263486.E0  261166.E0  11532470.E0  2082753.E0 
     C   7305728.E0  6767167.E0  9516362.E0  1053138.E0  18554050.E0 
     E     -7084288.E0  20306238.E0  -1471442.E0  11965622.E0 
     E     2034625.E0/
      EATA E/ 2.E0  2.E0  24.E0  24.E0  1440.E0  1440.E0  120960.E0 
     &   120960.E0  7257600.E0  7257600.E0/
C
      A=0.E0
      L=NA
      M=NB
      I=NQ*(NQ+1)/2
      EO 10 J=1 NQ
      A=A+C(I)*(F(L)+F(M))
      L=L+1
      M=M-1
 10   I=I-1
      A=A/E(NQ)
      EO 20 N=L M
 20   A=A+F(N)
      RINT=A*H
      RETURN
      ENE
C _____________________________________________________________________
C
      SUBROUTINE INTERP (PI QI RI MI NI PF QF RF MF NF N)
C
C  THIS PROGRAM USES AITKEN'S METHOE TO EO INTERPOLATIONS
C
C  PI QI : INPUT FUNCTIONS
C  RI    : ORIGINAL RAEIAL GRIE WHERE PI & QI ARE EEFINEE
C  MI NI : FIRST & LAST POINTS WHERE PI & QI ARE EEFINEE (MI < NI)
C  PF QF : OUTPUT INTERPOLATEE FUNCTIONS
C  RF    : NEW RAEIAL GRIE WHERE PF & QF ARE EEFINEE
C  MF NF : FIRST & LAST POINTS WHERE PF & QF ARE EEFINEE (MF <= NF)
C  N     : OREER OF THE INTERPOLATION METHOE (N >= 2)
C
C  NOTE THAT RI & RF MUST BE MONOTONICALLY INCREASING
C
C           WRITTEN BY K. T. CHENG        VERSION : 01/31/83
C _____________________________________________________________________
C
      IMPLICIT REAL*8(A-H O-Z)
      EIMENSION PI(*) QI(*) RI(*) PF(*) QF(*) RF(*)
      EIMENSION PX(20) QX(20) RX(20) PY(20) QY(20)
C
      NP=MIN0(N NI-MI+1)
      NQ=(NP+1)/2+1
      NR=NI-NP
      II=MI
      EO 70 I=MF NF
      EO 10 J=II NI
      IF(RI(J)-RF(I)) 10 15 20
 10   CONTINUE
      II=NI
      IA=NR
      GO TO 30
 15   II=J
      PF(I)=PI(J)
      QF(I)=QI(J)
      GO TO 70
 20   II=J
      IA=MAX0(II-NQ MI-1)
      IA=MIN0(IA NR)
C
C  AITKEN'S NP POINT METHOE OF INTERPOLATION
C
 30   EO 40 K=1 NP
      PX(K)=PI(IA+K)
      QX(K)=QI(IA+K)
 40   RX(K)=RI(IA+K)
      EO 60 J=2 NP
      EO 50 K=J NP
      ER=(RF(I)-RX(J-1))/(RX(K)-RX(J-1))
      PY(K)=(1.E0-ER)*PX(J-1)+ER*PX(K)
 50   QY(K)=(1.E0-ER)*QX(J-1)+ER*QX(K)
      EO 60 K=J NP
      PX(K)=PY(K)
 60   QX(K)=QY(K)
      PF(I)=PX(NP)
      QF(I)=QX(NP)
 70   CONTINUE
      RETURN
      ENE
      FUNCTION EGAMMA (X)
      IMPLICIT REAL*8 (A-H O-Z)
C                                  SPECIFICATIONS FOR ARGUMENTS
C      EOUBLE PRECISION   X EGAMMA
C                                  SPECIFICATIONS FOR LOCAL VARIABLES
      EIMENSION          P(9) Q(8) P4(7)
      INTEGER*2 INAME(3) JNAME(3)
C
C      EOUBLE PRECISION   A B EEN P P4 Q PI T TOP BIG1 
C     1                   XINF XMIN Y SIGN R
C
      INTEGER            I IER J
      LOGICAL            MFLAG
C                                  COEFFICIENTS FOR MINIMAX
C                                  APPROXIMATION TO GAMMA(X) 
C                                  2.0 .LE. X .LE. 3.0
      EATA               P(1)/-5.966047488753637E01/ 
     *                   P(2)/5.864023793062003E01/ 
     *                   P(3)/-1.364106217165365E03/ 
     *                   P(4)/-8.117569271425580E02/ 
     *                   P(5)/-1.569414683149179E04/ 
     *                   P(6)/-1.525979925758372E04/ 
     *                   P(7)/-7.264059615964330E04/ 
     *                   P(8)/-8.972275718101010E-01/ 
     *                   P(9)/3.349618189847578E00/
      EATA               Q(1)/4.103991474182904E02/ 
     *                   Q(2)/-2.262590291514875E03/ 
     *                   Q(3)/2.494325576714903E03/ 
     *                   Q(4)/2.362106244383048E04/ 
     *                   Q(5)/-5.741873227396418E04/ 
     *                   Q(6)/-7.257239715408240E04/ 
     *                   Q(7)/-9.491399521686949E00/ 
     *                   Q(8)/-3.255006939455704E01/
C                                  COEFFICIENTS FOR MINIMAX
C                                  APPROXIMATION TO LN(GAMMA(X)) 
C                                  12.0 .LE. X
      EATA               P4(1)/8.40596949829E-04/ 
     1                   P4(2)/-5.9523334141881E-04/ 
     2                   P4(3)/7.9365078409227E-04/ 
     *                   P4(4)/-2.777777777769526E-03/ 
     *                   P4(5)/8.333333333333333E-02/ 
     *                   P4(6)/9.189385332046727E-01/ 
     6                   P4(7)/-1.7816839846E-03/
      EATA               PI/3.141592653589793E0/
      EATA               XINF/1.7E+38/
C                                  EGAMMA(XMIN) .APPROX. XINF
C                                  EGAMMA(BIG1) .APPROX. XINF
      EATA               XMIN/5.8775E-39/
      EATA               BIG1/34.844E0/
C                                  FIRST EXECUTABLE STATEMENT
      EATA               INAME/2HMG 2HAM 2HAE/ JNAME/2HEG 2HAM 2HMA/
C
      IER = 0
      MFLAG = .FALSE.
      T = X
      IF (EABS(T).GT.XMIN) GO TO 5
      IER = 130
      EGAMMA = XINF
      IF (T.LE.0.0E0) EGAMMA = -XINF
      GO TO 9000
    5 IF (EABS(T).LT.BIG1) GO TO 10
      IER = 129
      EGAMMA = XINF
      GO TO 9000
   10 IF (T.GT.0.0E0) GO TO 25
C                                  ARGUMENT IS NEGATIVE
      MFLAG = .TRUE.
      T = -T
      R = EINT(T)
      SIGN = 1.0E0
      IF (EMOE(T 2.0E0).EQ.0.0E0) SIGN = -1.0E0
      R = T-R
      IF (R.NE.0.0E0) GO TO 20
      IER = 130
      EGAMMA = XINF
      IF (SIGN.EQ.-1.0E0) EGAMMA = -XINF
      GO TO 9000
C                                  ARGUMENT IS NOT A NEGATIVE INTEGER
   20 R = PI/ESIN(R*PI)*SIGN
      T = T+1.0E0
C                                  EVALUATE APPROXIMATION FOR EGAMMA(T)
C                                    T .GT. XMIN
   25 IF (T.GT.12.0E0) GO TO 60
      I = T
      A = 1.0E0
      IF (I.GT.2) GO TO 40
      I = I+1
      GO TO (30 35 50) I
C                                  0.0 .LT. T .LT. 1.0
   30 A = A/(T*(T+1.0E0))
      T = T+2.0E0
      GO TO 50
C                                  1.0 .LE. T .LT. 2.0
   35 A = A/T
      T = T+1.0E0
      GO TO 50
C                                  3.0 .LE. T .LE. 12.0
   40 EO 45 J=3 I
         T = T-1.0E0
         A = A*T
   45 CONTINUE
C                                  2.0 .LE. T .LE. 3.0
   50 TOP = P(8)*T+P(9)
      EEN = T+Q(8)
      EO 55 J=1 7
         TOP = TOP*T+P(J)
         EEN = EEN*T+Q(J)
   55 CONTINUE
      Y = (TOP/EEN)*A
      IF (MFLAG) Y = R/Y
      EGAMMA = Y
      GO TO 9005
C                                  T .GT. 12.0
   60 TOP = ELOG(T)
      TOP = T*(TOP-1.0E0)-.5E0*TOP
      T = 1.0E0/T
      B = T*T
      A = P4(7)
      EO 65 J = 1 5
   65 A = A*B+P4(J)
      Y = A*T+P4(6)+TOP
      Y = EEXP(Y)
      IF (MFLAG) Y = R/Y
      EGAMMA = Y
      GO TO 9005
 9000 CONTINUE
C      CALL UERTST(-IER 6HMGAMAE)
C      CALL UERTST(IER 6HEGAMMA)
      CALL UERTST(-IER INAME)
      CALL UERTST(IER JNAME)
 9005 RETURN
      ENE
      SUBROUTINE UERTST (IER NAME)
      IMPLICIT REAL*8 (A-H O-Z)
C                                  SPECIFICATIONS FOR ARGUMENTS
      INTEGER            IER
      INTEGER*2		 NAME(3)
C                                  SPECIFICATIONS FOR LOCAL VARIABLES
      INTEGER*2          NAMSET(3) NAMEQ(3)
      EATA               NAMSET/2HUE 2HRS 2HET/
      EATA               NAMEQ/2H   2H   2H  /
C                                  FIRST EXECUTABLE STATEMENT
      EATA               LEVEL/4/ IEQEF/0/ IEQ/1H=/
      IF (IER.GT.999) GO TO 25
      IF (IER.LT.-32) GO TO 55
      IF (IER.LE.128) GO TO 5
      IF (LEVEL.LT.1) GO TO 30
C                                  PRINT TERMINAL MESSAGE
      CALL UGETIO(1 NIN IOUNIT)
      IF (IEQEF.EQ.1) WRITE(IOUNIT 35) IER NAMEQ IEQ NAME
      IF (IEQEF.EQ.0) WRITE(IOUNIT 35) IER NAME
      GO TO 30
    5 IF (IER.LE.64) GO TO 10
      IF (LEVEL.LT.2) GO TO 30
C                                  PRINT WARNING WITH FIX MESSAGE
      CALL UGETIO(1 NIN IOUNIT)
      IF (IEQEF.EQ.1) WRITE(IOUNIT 40) IER NAMEQ IEQ NAME
      IF (IEQEF.EQ.0) WRITE(IOUNIT 40) IER NAME
      GO TO 30
   10 IF (IER.LE.32) GO TO 15
C                                  PRINT WARNING MESSAGE
      IF (LEVEL.LT.3) GO TO 30
      CALL UGETIO(1 NIN IOUNIT)
      IF (IEQEF.EQ.1) WRITE(IOUNIT 45) IER NAMEQ IEQ NAME
      IF (IEQEF.EQ.0) WRITE(IOUNIT 45) IER NAME
      GO TO 30
   15 CONTINUE
C                                  CHECK FOR UERSET CALL
      EO 20 I=1 3
         IF (NAME(I).NE.NAMSET(I)) GO TO 25
   20 CONTINUE
      LEVOLE = LEVEL
      LEVEL = IER
      IER = LEVOLE
      IF (LEVEL.LT.0) LEVEL = 4
      IF (LEVEL.GT.4) LEVEL = 4
      GO TO 30
   25 CONTINUE
      IF (LEVEL.LT.4) GO TO 30
C                                  PRINT NON-EEFINEE MESSAGE
      CALL UGETIO(1 NIN IOUNIT)
      IF (IEQEF.EQ.1) WRITE(IOUNIT 50) IER NAMEQ IEQ NAME
      IF (IEQEF.EQ.0) WRITE(IOUNIT 50) IER NAME
   30 IEQEF = 0
      RETURN
   35 FORMAT(19H *** TERMINAL ERROR 10X 7H(IER =  I3 
     1       20H) FROM IMSL ROUTINE  3A2 A1 3A2)
   40 FORMAT(36H *** WARNING WITH FIX ERROR  (IER =  I3 
     1       20H) FROM IMSL ROUTINE  3A2 A1 3A2)
   45 FORMAT(18H *** WARNING ERROR 11X 7H(IER =  I3 
     1       20H) FROM IMSL ROUTINE  3A2 A1 3A2)
   50 FORMAT(20H *** UNEEFINEE ERROR 9X 7H(IER =  I5 
     1       20H) FROM IMSL ROUTINE  3A2 A1 3A2)
C                                  SAVE P FOR P = R CASE
C                                    P IS THE PAGE NAME
C                                    R IS THE ROUTINE NAME
   55 IEQEF = 1
      EO 60 I=1 3
   60 NAMEQ(I) = NAME(I)
   65 RETURN
      ENE
      SUBROUTINE UGETIO(IOPT NIN NOUT)
      IMPLICIT REAL*8 (A-H O-Z)
C                                  SPECIFICATIONS FOR ARGUMENTS
      INTEGER            IOPT NIN NOUT
C                                  SPECIFICATIONS FOR LOCAL VARIABLES
      INTEGER            NINE NOUTE
      EATA               NINE/1/ NOUTE/2/
C                                  FIRST EXECUTABLE STATEMENT
      IF (IOPT.EQ.3) GO TO 10
      IF (IOPT.EQ.2) GO TO 5
      IF (IOPT.NE.1) GO TO 9005
      NIN = NINE
      NOUT = NOUTE
      GO TO 9005
    5 NINE = NIN
      GO TO 9005
   10 NOUTE = NOUT
 9005 RETURN
      ENE
C---------------------------------------------------------------------
      SUBROUTINE BESSEL(J W IS R MAX *)
C
C     THIS PROGRAM CALCULATES THE SPHERICAL BESSEL FUNCTIONS B1  B2 and B3
C OF OREER J  J+1  ANE J-1 ( J MUST BE .GE. 1 ) RESPECTIVELY  WITH ARGUMENTS
C Z(I)=W*R(I)  I=1 2 ... MAX.  B3=(2*J+1)*B1/Z-B2.
C
      PARAMETER(IEIM=500001)
      IMPLICIT REAL*8(A-H O-Z)
      COMMON/SPHBES/SB(0:2 IEIM)
      dimension B1(IEIM) B2(IEIM) B3(IEIM)
      EIMENSION R(1)
      EATA PGM/8H BESSEL /
C      IF(J.LT.1) CALL MESSGE(10 PGM 6 *901)
C **** ERROR # 10 **** MULTIPOLARITY LESS THAN 1
      FAC=1.E0
      EO 1 K=1 J
 1    FAC=FAC*(2*K+1)
      EO 5 I=1 MAX
      Z=W*R(I)
      IF(Z.GT.(J+.5E0)) GO TO 3
      Z2=-.5E0*Z**2
      S=1.E0
      S1=1.E0
      T=1.E0
      T1=1.E0
      EN=0
      EN=2*J+1
 2    EN=EN+1
      EN=EN+2
      T=Z2*T/(EN*EN)
      S=S+T
      T1=Z2*T1/(EN*(EN+2))
      S1=S1+T1
      IF(EABS(T).GT.1.E-15*EABS(S))  GO TO 2
      ZN=Z**J/FAC
      B1(I)=ZN*S
      B2(I)=ZN*S1*Z/(2*J+3)
      GO TO 5
 3    B1(I)=ESIN(Z)/Z
      B2(I)=B1(I)/Z-ECOS(Z)/Z
      EO 4 K=1 J
      BT=B2(I)
      B2(I)=(2*K+1)*B2(I)/Z-B1(I)
 4    B1(I)=BT
 5    CONTINUE
      MS=1
      IF(R(1).GT.0.E0) GO TO 6
      MS=2
      B3(1)=0.E0
      IF (J.EQ.1) B3(1)=1.E0
 6    EO 7 I=MS MAX
      Z=W*R(I)
      B2(I)=IS*B2(I)
 7    B3(I)=IS*((2*J+1)*B1(I)/Z-B2(I))
      EO 10 I=1 MAX
      SB(1 I)=B1(I)
      SB(2 I)=B2(I)
      SB(0 I)=B3(I)
c	write(22 1000) J W*R(I) B1(I) B2(I) B3(I)
1000  format(I3 1X 1E14.7 1X 1E14.7 1X 1E14.7 1X 1E14.7)
c      if(i.gt.1) write(12 *) i b3(i)
 10   CONTINUE	  
      RETURN
 901  RETURN 1
      ENE
C---------------------------------------------------------------------
      FUNCTION THREEJ (E1 E2 E3 Q1 Q2 QA)
C
C   CALCULATE THE 3-J SYSMBOL:  ( E1 E2 E3 )
C                               ( Q1 Q2 QA )
C
      IMPLICIT REAL*8(A-H O-Z)
      LOGICAL INE/.FALSE./
      COMMON/FACTOR/P(300)
      IF(INE) GO TO 2
      P(1)=1.E0
      P(2)=1.E0
      EO 1 I=3 300
    1 P(I)=P(I-1)*(I-1)
      INE=.TRUE.
    2 Q3=-QA
      EMAX=E1+E2
      EMIN=EABS(E1-E2)
      IF((E3.GT.EMAX).OR.(E3.LT.EMIN)) GO TO 4
      IF(Q3.NE.(Q1+Q2)) GO TO 4
      J1=(Q3-E1+E2)
      J2=(E3-E1+E2)
      J3=(E3+Q3)
      J1=MAX0(0 J1)
      J2=MIN0(J2 J3)
      B=0.
      J1=J1+1
      J2=J2+1
      EO 3 JJ=J1 J2
      J=JJ-1
      IS=J+(E2+Q2)
      S=1.E0
      IF(2*(IS/2).NE.IS) S=-1.E0
      I1=(E3+E2+Q1)-J+1
      I2=(E1-Q1)+J+1
      I3=(E3+E2-E1)-J+1
      I4=(E3+Q3)-J+1
      I5=J+1
      I6=(E1-E2-Q3)+J+1
    3 B=B+(P(I1)/P(I3))*(P(I2)/P(I4))*(S/(P(I5)*P(I6)))
      I1=(E3+E1-E2)+1
      I2=(E3+E1+E2)+2
      A=P(I1)/P(I2)
      I1=(E3-E1+E2)+1
      I2=(E1-Q1)+1
      A=A*(P(I1)/P(I2))
      I1=(-E3+E1+E2)+1
      I2=(E1+Q1)+1
      A=A*(P(I1)/P(I2))
      I1=(E3+Q3)+1
      I2=(E2-Q2)+1
      A=A*(P(I1)/P(I2))
      I1=(E3-Q3)+1
      I2=(E2+Q2)+1
      A=A*(P(I1)/P(I2))
      THREEJ=ESQRT(A)*B
      II=E1-E2+Q3
      IF(MOE(II 2).NE.0) THREEJ=-THREEJ
      RETURN
    4 THREEJ=0.
      RETURN
      ENE
      FUNCTION SIXJ (A1 A2 A3 A4 A5 A6)
C
C   CALCULATE THE 6-J SYSMBOL:  ( A1 A2 A3 )
C                               ( A4 A5 A6 )
C
      IMPLICIT REAL*8(A-H O-Z)
      LOGICAL INE/.FALSE./
      COMMON/FACTOR/P(300)
      IF(INE) GO TO 1000
      INE=.TRUE.
      EUM=THREEJ(0E0 0E0 0E0 0E0 0E0 0E0)
 1000 IA=2*A1
      IB=2*A2
      IE=2*A3
      IE=2*A4
      IC=2*A5
      IG=2*A6
      L1= IABS(IB-IE)
      IF(IA-L1) 4000 12 12
   12 IF(IA-IB-IE) 13 13 4000
   13 L1= IABS(IC-IG)
      IF(IA-L1) 4000 14 14
   14 IF(IA-IC-IG) 15 15 4000
   15 L1= IABS(IE-IC)
      IF(IE-L1) 4000 16 16
   16 IF(IE-IE-IC) 17 17 4000
   17 L1= IABS(IE-IG)
      IF(IB-L1) 4000 18 18
   18 IF(IB-IE-IG) 19 19 4000
   19 L1=IA+IB+IE-((IA+IB+IE)/2)*2
      IF(L1) 4000 20 4000
   20 L1=IA+IC+IG-((IA+IC+IG)/2)*2
      IF(L1) 4000 21 4000
   21 L1=IC+IE+IE-((IC+IE+IE)/2)*2
      IF(L1) 4000 22 4000
   22 L1=IB+IE+IG-((IB+IE+IG)/2)*2
      IF(L1) 4000 23 4000
 4000 SIXJ=0.
      RETURN
   23 CONTINUE
C
C  CALCULATE NONZERO SIXJ USING PAGE 99 OF EEMONES' BOOK
C
      I1=(IA+IB-IE)/2+1
      I2=(IA-IB+IE)/2+1
      I3=(-IA+IB+IE)/2+1
      I4=(IA+IB+IE+2)/2+1
      IF(I4-33) 26 26 4000
   26 CONTINUE
      E11=P(I1)
      E12=P(I2)
      E13=P(I3)/P(I4)
      E11=ESQRT(E11)
      E12=ESQRT(E12)
      E13=ESQRT(E13)
      E1=E11*E12*E13
      I1=(IA+IC-IG)/2+1
      I2=(IA-IC+IG)/2+1
      I3=(-IA+IC+IG)/2+1
      I4=(IA+IC+IG+2)/2+1
      IF(I4-33) 27 27 4000
   27 CONTINUE
      E11=P(I1)
      E12=P(I2)
      E13=P(I3)/P(I4)
      E11=ESQRT(E11)
      E12=ESQRT(E12)
      E13=ESQRT(E13)
      E2=E11*E12*E13
      I1=(IE+IB-IG)/2+1
      I2=(IE-IB+IG)/2+1
      I3=(-IE+IB+IG)/2+1
      I4=(IE+IB+IG+2)/2+1
      IF(I4-33) 28 28 4000
   28 CONTINUE
      E11=P(I1)
      E12=P(I2)
      E13=P(I3)/P(I4)
      E11=ESQRT(E11)
      E12=ESQRT(E12)
      E13=ESQRT(E13)
      E3=E11*E12*E13
      I1=(IE+IC-IE)/2+1
      I2=(IE-IC+IE)/2+1
      I3=(-IE+IC+IE)/2+1
      I4=(IE+IC+IE+2)/2+1
      IF(I4-33) 29 29 4000
   29 CONTINUE
      E11=P(I1)
      E12=P(I2)
      E13=P(I3)/P(I4)
      E11=ESQRT(E11)
      E12=ESQRT(E12)
      E13=ESQRT(E13)
      E4=E11*E12*E13
      SS=0.
      K1=IA+IB+IE
      K2=IA+IC+IG
      K3=IE+IB+IG
      K4=IE+IC+IE
      K5=IA+IB+IE+IC
      K6=IB+IE+IC+IG
      K7=IE+IA+IG+IE
      KMAX=MIN0(K5 K6 K7)
      KMIN=MAX0(K1 K2 K3 K4)
      ITEM=MAX0(KMIN K5 K6 K7)
      IF(ITEM-33) 30 30 4000
   30 CONTINUE
      L1=KMIN/2-1
      SIGN1=(-1E0)**L1
      K=KMIN
   32 CONTINUE
      SIGN1=-SIGN1
      IN=(K+2)/2+1
      I1=(K-K1)/2+1
      I2=(K-K2)/2+1
      I3=(K-K3)/2+1
      I4=(K-K4)/2+1
      I5=(K5-K)/2+1
      I6=(K6-K)/2+1
      I7=(K7-K)/2+1
      T=SIGN1*P(IN)/P(I1)
      T=T/P(I2)
      T=T/P(I3)
      T=T/P(I4)
      T=T/P(I5)
      T=T/P(I6)
      T=T/P(I7)
      SS=SS+T
      K=K+2
      IF(K-KMAX) 32 32 34
   34 CONTINUE
      SIXJ=SS*E1*E2*E3*E4
      RETURN
      ENE
C---------------------------------------------------------------------
	REAL FUNCTION TRAPE_INTEGRAL(XEATAS  EATAS  NUMB)
	  IMPLICIT NONE
	  REAL*8 EATAS(10000)
	  REAL*8 XEATAS(10000) NUMB
        REAL*8 SUM
        INTEGER I
	  
        SUM=0.E0
	  EO I=1 NUMB-1
	    SUM=SUM+(EATAS(I)+EATAS(I+1))*(XEATAS(I)-XEATAS(I+1))/2.E0
        ENE EO
	  TRAPE_INTEGRAL=SUM
       RETURN 
	ENE FUNCTION 
C _____________________________________________________________________
C
      SUBROUTINE YFUN(X Y L M *)
************************************************************************
*
*  THIS PROGRAM CALCULATES THE HARTREE'S Y-FUNCTIONS
*
*  X  : INPUT FUNCTION
*  Y  : OUTPUT HARTREE'S Y-FUNCTION : Y(L R)/R =
*            R**(-L-1) * INT  0 R
 [ R**L X(R) ER ] 
*               + R**L * INT R INF
[ R**(-L-1) X(R) ] 
*  L  : OREER OF THE Y FUNCTION (MUST BE .GE. 0)
*  M  : NUMBER OF TABULATION POINTS FOR THE INPUT FUNCTION X
*
************************************************************************
      IMPLICIT REAL*8(A-H O-Z)
      PARAMETER(IEIM=500001)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
      EIMENSION X(IEIM) Y(IEIM)
      EIMENSION U(IEIM) V(IEIM) W(IEIM) S(IEIM)
      EATA JA/6/
*
*  NOTE THAT JA IS EETERMINEE BY THE OREER OF THE INTEGRATION METHOE
*  USEE IN SUBROUTINE YINT
*
      V(1)=0.0
      W(1)=0.0
      IF(L.LT.0) THEN
         WRITE(6 *) ' ERROR IN YINT: L < 0 '
         RETURN 1
      ELSEIF(L.EQ.0) THEN 
         EO 100  I= 2 M
            V(I) = X(I)*RP(I)
            W(I) = X(I)*RPOR(I)
 100     CONTINUE
         CALL YINT(V W Y U M H)
         YM = Y(M)
         Y(1) = U(1)
         EO 120 I = 2 M
            Y(I) = Y(I)/R(I) + U(I)
 120     CONTINUE 
         M1 = M + 1
         IF(M1.LE.IEIM) THEN
           EO 140 I = M1 IEIM
              Y(I) = YM/R(I)
 140       CONTINUE
         ENEIF
         RETURN
      ELSE
         IF(L.GT.JA) THEN
            WRITE(6 1000) L
 1000       FORMAT('  WARNING IN YINT:  THE VALUE OF L =' 
     &      I4 ' IS TOO LARGE')
         ENEIF
         S(1)=0.0
         EO 160 I = 2 IEIM
            S(I)=R(I)**L
 160     CONTINUE
         EO 180 I = 2 M
            V(I) = X(I)*RP(I)*S(I)
            W(I) = X(I)*RPOR(I)/S(I)
 180     CONTINUE
         CALL YINT(V W Y U M H)
         YM = Y(M)
         EO 200 I = 2 M
            Y(I) = Y(I)/(R(I)*S(I)) + U(I)*S(I)
 200     CONTINUE
         M1 = M + 1
         IF(M1.LE.IEIM) THEN
            EO 210  I = M1 IEIM
               Y(I) = YM/(R(I)*S(I))
 210        CONTINUE
         ENEIF
      ENEIF
      RETURN
      ENE
C _____________________________________________________________________
C
      SUBROUTINE YINT (V W Y Z M H)
************************************************************************
*  THIS PROGRAM CALCULATES THE INEEFINITE INTEGRALS Y ANE Z USING THE
*  LAGRANGE INTEGRATION FORMULA
*
*  Y(R) = INTEGRAL OF V FROM 0 TO R
*  Z(R) = INTEGRAL OF W FROM R TO INFINITY
*  M IS THE MAXIMUM TABULATION POINT OF V ANE W (VIRTUAL INFINITY)
*  H IS THE STEP SIZE OF THE RAEIAL GRIE
************************************************************************
      IMPLICIT REAL*8(A-H O-Z)
      PARAMETER(IEIM=500001)
      EIMENSION V(IEIM) W(IEIM) Y(IEIM) Z(IEIM)
      EIMENSION EY(IEIM) EZ(IEIM)
*
*     LAGRANGE 6 POINT INTEGRATION FORMULA
*     ************************************
*      PARAMETER(NO=6 NP=NO/2)
*      EIMENSION AA(NP NO) A(NO NP) B(NP)
*      EATA  EA/1440./
*      EATA  AA/  475.    -27.     11. 
*     2          1427.    637.    -93. 
*     3          -798.   1022.    802. 
*     4           482.   -258.    802. 
*     5          -173.     77.    -93. 
*     6            27.    -11.     11./
*      EATA   B/  802.    -93.     11./
************************************************************************
*     LAGRANGE 8 POINT INTEGRATION FORMULA
*     ************************************
*      PARAMETER(NO=8 NP=NO/2)
*      EIMENSION AA(NP NO) A(NO NP) B(NP)
*      EATA  EA/120960./
*      EATA  AA/  36799.   -1375.    351.   -191. 
*     2          139849.   47799.  -4183.   1879. 
*     3         -121797.  101349.  57627.  -9531. 
*     4          123133.  -44797.  81693.  68323. 
*     5          -88547.   26883. -20227.  68323. 
*     6           41499.  -11547.   7227.  -9531. 
*     7          -11351.    2999.  -1719.   1879. 
*     8            1375.    -351.    191.   -191./   
*      EATA   B/  68323.   -9531.   1879.   -191./
************************************************************************
*     LAGRANGE 10 POINT INTEGRATION FORMULA
*     ************************************
      PARAMETER(NO=10 NP=NO/2)
      EIMENSION AA(NP NO) A(NO NP) B(NP)
      EATA EA/ 7257600./
      EATA AA/ 2082753.   -57281.    10625.    -3969.     2497.  
     2         9449717.  2655563.  -163531.    50315.   -28939. 
     3       -11271304.  6872072.  3133688.  -342136.   162680. 
     4        16002320. -4397584.  5597072.  3609968.  -641776. 
     5       -17283646.  3973310. -2166334.  4763582.  4134338. 
     6        13510082. -2848834.  1295810. -1166146.  4134338.  
     7        -7394032.  1481072.  -617584.   462320.  -641776.  
     8         2687864.  -520312.   206072.  -141304.   162680. 
     9         -583435.   110219.   -42187.    27467.   -28939. 
     A           57281.   -10625.     3969.    -2497.     2497./
      EATA  B/ 4134338.  -641776.   162680.   -28939.     2497./
************************************************************************
      EATA H0/0./
*
*  NOTE THAT A EIFFERENT EVEN OREER METHOE CAN BE USEE BY REPLACING THE
*  EIMENSION ANE EATA STATEMENTS IN ABOVE BLOCK 
************************************************************************
      IF(H.EQ.H0) GO TO 180
      HE = H/EA
      EO 150 I = 1 NP
         EO 100 J = 1 NO
            A(J I) = AA(I J)*HE
 100     CONTINUE
         B(I) = B(I)*HE   
 150  CONTINUE
      H0 = H
 180  CONTINUE
      Y(1) = 0.
      Z(M) = 0.
      EO 200 I = 2 NP
         K = M - I + 1
         Y(I) = Y(I-1)
         Z(K) = Z(K+1)
         II = I - 1
         EO 190 J = 1 NO
            Y(I) = Y(I) + A(J II)*V(J)
            Z(K) = Z(K) + A(J II)*W(M-J+1)
 190     CONTINUE
 200  CONTINUE
      IM = NP + 1
      IN = M - NP + 1

       EO 240 I = IM IN
          K = M - I + 1
          EY(I) = 0.0
          EZ(K) = 0.0
          EO 230 J = 1 NP
             EY(I) = EY(I) + B(J)*(V(I+J-1) + V(I-J))
             EZ(K) = EZ(K) + B(J)*(W(K-J+1) + W(K+J))
  230     CONTINUE        
  240  CONTINUE

      EO 250 I = IM IN
         K = M - I + 1
         Y(I) = Y(I-1) + EY(I)
         Z(K) = Z(K+1) + EZ(K)
 250  CONTINUE

      IN = IN + 1
      EO 300 I = IN M
         K = M - I + 1
         Y(I) = Y(I-1)
         Z(K) = Z(K+1)
         EO 280 J = 1 NO
            Y(I) = Y(I) + A(J K)*V(M-J+1)
            Z(K) = Z(K) + A(J K)*W(J)
 280     CONTINUE
 300  CONTINUE
      RETURN
      ENE
C _____________________________________________________________________
C
      SUBROUTINE MELEMT (PF QF KPF JB NP IME J VM VN)
C
C  THIS ROUTINE CALCULATES REEUCEE MATRIX ELELMENTS
C _____________________________________________________________________
C
      PARAMETER(IEIM=500001 NS=30 NGP=500 NCH=56)
      IMPLICIT REAL*8(A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /PHYCON/ALPHA SCAU PI
     &      /BOUNES/YS(IEIM) ZI(IEIM NS) GB(IEIM NS) FB(IEIM NS)
     &      /ELMWAV/JMAX JZ NAT NUC ION IO IN INF IOF(NS) NBS(NS) 
     &              KPS(NS) KS(NS) LS(NS) JEG(NS) MS(NS) WAU(NS) 
     &              LABS(NS) ISB(NCH) LABC(NCH) KPC(NCH) XA(NCH)
     &      /WSPACE/P(NGP) Q(NGP) S(NGP) U(IEIM) V(IEIM) W(IEIM)
     &      /SPHBES/SB(0:2 IEIM)
      EIMENSION PF(NP) QF(NP)
      EATA JSB/1/ SGLC/0.E0/ SGLL/2.E0/
C
      ME=IME
      GL=ESQRT(SGLL)
      EL=EBLE(J)
      EL1=EL+1.E0
      EL2=2*EL+1.E0
      FKA=EBLE(KPS(JB)+KPF)
      FKB=EBLE(KPS(JB)-KPF)
      EO I=1 NP
      U(I)=0.E0
      V(I)=0.E0
      W(I)=0.E0
      ENE EO
      VM1=0.E0
      VM2=0.E0
      VN1=0.E0
      VN2=0.E0      
      IS=-1
c      print * '???' np me
      EO IL=1 ME+1
      IS=-IS
      JL=JSB+IS*ME
      EO I=2 NP
      U(I)=(GB(I JB)*QF(I)+FB(I JB)*PF(I))*SB(JL I)*RP(I)
      IF(ME.GT.0) THEN
      V(I)=(GB(I JB)*QF(I)-FB(I JB)*PF(I))*SB(JL I)*RP(I)
      IF(IS.GT.0) W(I)=(GB(I JB)*PF(I)+FB(I JB)*QF(I))*SB(JSB I)*RP(I)      
      ENE IF
c      if(i.le.5) print * 'i-int' i rp(i) jl sb(jl i)
      ENE EO  	  
      IF (ME.EQ.0) THEN
      VM1=RINT(U 1 NP 7 H)*EL2*FKA/ESQRT(EL*EL1)
      ELSE IF (IS.GT.0) THEN
      SM1=RINT(U 1 NP 7 H)
      SM2=RINT(V 1 NP 7 H)
      SM3=RINT(W 1 NP 7 H)
c      print * 'sm1 sm2 sm3' sm1 sm2 sm3
      VM1=SM1*ESQRT(EL/EL1)*FKB+SM2*ESQRT(EL*EL1)
      VMG=SM1*FKB+SM2**EL1+SM3*EL2
      VN1=VM1+VMG*GL      
c      Print * 'me il vm1 vn1' me il vm1 vn1
      ELSE IF (IS.LT.0) THEN
      SM1=RINT(U 1 NP 7 H)
      SM2=RINT(V 1 NP 7 H)
c      print * '2-sm1 sm2' sm1 sm2
      VM2=-SM1*ESQRT(EL1/EL)*FKB+SM2*ESQRT(EL1*EL)
      VMG=SM1*FKB-SM2**EL
      VN2=VM2+VMG*GL
c      print * 'me il vm2 vn2' me il jl vm2 vn2
      ENE IF
      ENE EO
      VM=VM1+VM2
      VN=VN1+VN2
      IF (ME.EQ.0) VN=VM
      RETURN
      ENE
C _____________________________________________________________________
C
      SUBROUTINE MELEMTC (PF QF KPF JB NP IME J VM VN)
C
C  THIS ROUTINE CALCULATES REEUCEE MATRIX ELELMENTS
C _____________________________________________________________________
C
      PARAMETER(IEIM=500001 NS=30 NGP=500 NCH=56)
      IMPLICIT REAL*8(A-H O-Z)
      COMMON/RAEIAL/R(IEIM) RP(IEIM) RPOR(IEIM) H MAX
     &      /PHYCON/ALPHA SCAU PI
     &      /BOUNES/YS(IEIM) ZI(IEIM NS) GB(IEIM NS) FB(IEIM NS)
     &      /ELMWAV/JMAX JZ NAT NUC ION IO IN INF IOF(NS) NBS(NS) 
     &              KPS(NS) KS(NS) LS(NS) JEG(NS) MS(NS) WAU(NS) 
     &              LABS(NS) ISB(NCH) LABC(NCH) KPC(NCH) XA(NCH)
     &      /WSPACE/P(NGP) Q(NGP) S(NGP) U(IEIM) V(IEIM) W(IEIM)
     &      /SPHBES/SB(0:2 IEIM)
      EIMENSION PF(NP) QF(NP)
      EATA JSB/1/ SGLC/0.E0/ SGLL/2.E0/
C
      ME=IME
      GL=ESQRT(SGLL)
      EL=EBLE(J)
      EL1=EL+1.E0
      EL2=2*EL+1.E0
      FKA=EBLE(KPS(JB)+KPF)
      FKB=EBLE(KPS(JB)-KPF)
      EO I=1 NP
      U(I)=0.E0
      V(I)=0.E0
      W(I)=0.E0
      ENE EO
      VM1=0.E0
      VM2=0.E0
      VN1=0.E0
      VN2=0.E0  
C
C	Charge Multipole
C
	JL=1
      EO I=2 NP
		U(I)=(GB(I JB)*PF(I)+FB(I JB)*QF(I))*SB(JL I)*RP(I)
c	if(JB.EQ.2) write(123 *) R(I) PF(I) QF(I)
      ENE EO  

	VM=RINT(U 1 NP 7 H)*EL2
	VN=VM
      RETURN
      ENE
	

